/* -------------------------- REXX ------------------------------ *
 *                                                                *
 *                $$$$ M   M DDDD  EEEEE L                        *
 *               $ $   MM MM D   D E     L                        *
 *                $$$  M M M D   D EEEE  L                        *
 *                 $ $ M   M D   D E     L                        *
 *               $$$$  M   M DDDD  EEEEE LLLLL                    *
 *                                                                *
 * This exec does a delete of a PDS member using ISPF dialog      *
 * services and therefore maintains the ENQ across. The exec does *
 * provide the same function under batch (running ISPF) as in     *
 * option 3.1 for online ISPF.                                    *
 *                                                                *
 * Syntax - $MDEL pds(xxx) VOL(zzzzzz) MASK(YES)                  *
 *          pds - Name of PDS.                                    *
 *          xxx = name of member to be deleted.                   *
 *            Mask can be used, i.e. $*, %%A%1.                   *
 *            For a MASK to be used, MARK(YES) has to be included *
 *            as extra caution measure.                           *
 *          VOLUME(zzzzzz) - zzzzzz = VOLSER of PDS (optional)    *
 * Note that ALL KEYWORDS can be abbreviated, i.e. MA(YES),       *
 * V(OLUME), as long as they are distinguishable.                 *
 *                                                                *
 *                                                                *
 * 02/16/15 - VNV - First added.                                  *
 *                                                                *
 * -------------------------------------------------------------- */

inDsn    = ""
inVol    = ""
delM     = ""
newM     = ""
massDel  = 0
massOpt  = 0
pfxhead  = " =>"
pfx      = "  >"
pfxblk   = "   "
pfxprt   = " .."


parse source . . exec_Name .

if SYSVAR("SYSENV") = "BACK" then do
   batIspf = 1
   end
else do
   if sysvar(SYSISPF) <> "ACTIVE" then do       /* under READY mode */
      parse UPPER arg allParms
      queue "ISPSTART CMD("exec_Name allParms") NEWAPPL(ISR)"
      exit
      end
   batIspf = 0
   ispfDd  = '$#$'||STRIP(TIME("S"))
   x = outtrap("trap.","*")
   address TSO "FREE  F("ispfDD")"
   address TSO "ALLOC F("ispfDD") SPACE(5 2) CYL DSORG(PS)"  ,
               "LRECL(1024) RECF(F B)"
   address TSO "MAKEBUF"
   tempRc = rc
   x = outtrap("off")
   end

saveEnv = ADDRESS()
address ISPEXEC

$sysid  = STRIP(MVSVAR('SYSNAME'))

X=W(,,0)
X=W("DELETE processing starts on" ,
     $sysid "at" TIME() "on" DATE('U')".",,pfxhead)

parse UPPER arg allParms

X=W("Cmd Input =>" exec_Name allParms,,0)
X=W(,,0)

if allParms = "" then do
   x=Syntax_Err()
   end

x = Get_Parms(allParms)

if inDsn = "" | delM = "" then do
   x=Syntax_Err()
   end

if INDEX(delM,'*') > 0  | ,
   INDEX(delM,'%') > 0  then do
   massDel = 1                     /* turn on 'mass delete' flag */
   if massOpt = 0 then do
      X=W("MASK(YES) is required for a mass delete operation. " ,
             "Exec aborted - RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   end

if inVol <> "" then do
   xTra = "VOLUME("inVol")"
   xTraMsg = " on" inVol
   end
else do
   xTra = ""
   xTraMsg = ""
   end

/* --------------------------------------------------------- *
 * To obtain the fully qualified Data set name in case the   *
 * PDSNAME supplied from parm did not have single quotes     *
 * around the name.                                          *
 * --------------------------------------------------------- */

temp = inDsn "DIRECTORY NORECALL" xTra
tempRc = LISTDSI(temp)
if tempRc = 16 then do
   if SYSREASON = 9 then do
      X=W("Data set" inDsn "has been migrated - RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   If SYSREASON = 5 then do
      X=W("Data set" inDsn "not cataloged - RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   else do
      X=W(SYSMSGLVL2)
      X=W("LISTDSI error for" inDsn ,
             "- SYSREASON=" SYSREASON "- RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   end

inDsn = sysdsname
x=Print_Dsn()
x=W(,,0)

if SUBSTR(sysdsorg,1,2) <> "PO" then do
   X=W("Data set is non-PDS:" inDsn||xTraMsg "- RC=12.",12,0)
   x=View_Data()
   exit 12
   end

/* ------------------------------------------------------------ *
 * Everything looks fine here.  Continue to process the PDS.    *
 * ------------------------------------------------------------ */
"CONTROL ERRORS RETURN"

"LMINIT DATAID(dataid) DATASET('"inDsn"') ENQ(SHRW)" xTra
if rc > 0 then do
   X=W("Err:" STRIP(zerrlm))
   X=W("INIT error for dataset" inDsn||xTraMsg "- RC=12.",12,0)
   x=View_Data()
   exit 12
   end

"LMOPEN DATAID("dataid") OPTION(OUTPUT)"
if rc > 0 then do
   X=W("Err:" STRIP(zerrlm))
   X=W("OPEN error for dataset" inDsn||xTraMsg "- RC=12.",12,0)
   call Free_file
   x=View_Data()
   exit 12
   end

if massDel = 1 then do

   x=W("Checking names that match" delM":")
   X=W(,,0)

   varList = ""
   listRc = 0
   do until listRc > 0
      "LMMLIST DATAID("dataid") MEMBER(VARLIST) PATTERN("delM")"
      listRc = rc
      select
         when listRc = 0 then do
            x=W("... Matching member name:" varList,,0)
            end
         when listRc = 4 then do
            x=W("No matching member found for" delM "- RC=8.",8,0)
            call Close_file
            call Free_file
            x=View_Data()
            exit 8
            end
         when listRc = 8 then do
            "LMMLIST DATAID("dataid") MEMBER(VARLIST)" ,
              "OPTION(FREE)"
            end
         otherwise do
            X=W("Err:" STRIP(zerrlm))
            X=W("LIST error for dataset" inDsn||xTraMsg ,
                   "- RC=12.",12,0)
            call Close_file
            call Free_file
            x=View_Data()
            exit 12
            end
         end                               /* select */
      end
   end

"LMMDEL DATAID("dataid") MEMBER("delM")"
tempRc = rc

/* ------------------------------------------------------------ *
 * Issued the DELETE. Now check return codes.                   *
 * ------------------------------------------------------------ */

if massDel = 1 then X=W(,,0)

exitCc = 0

select
   when tempRc = 0 then do
      X=W(delM "successfully deleted in" inDsn||xTraMsg "- RC=0.",0,0)
      end
   when tempRc = 8 then do
      X=W(delM "not found in" inDsn||xTraMsg "- RC=8.",8,0)
      exitCC = 8
      end
   otherwise do
      X=W("Err:" STRIP(zerrlm))
      X=W("DEL error for" inDsn "- RC=12.",12,0)
      exitCC = 12
      end
   end                                    /* select */

call Close_file
call Free_file
x=View_Data()

address saveENV

exit exitCC


close_file:
"LMCLOSE DATAID("dataid")"
return 0

Free_file:
"LMFREE DATAID("dataid")"
return 0


Print_Dsn:
x=W(STRIP(SYSDSNAME)                ,
    "V("STRIP(SYSVOLUME)")"         ,
    "RECF("STRIP(SYSRECFM)")"        ,
    "LRECL("STRIP(SYSLRECL)")"       ,
    "BLKS("STRIP(SYSBLKSIZE)")"      ,
     LEFT(STRIP(SYSUNITS),3)         ,
    "SP("STRIP(SYSPRIMARY) STRIP(SYSSECONDS)")",,pfxPrt)
return 0


View_Data:

X=W(,,0)
X=W("Processing ends on",
    $sysid "at" TIME() "on" DATE('U')".",,pfxhead)
X=W(,,0)

if batISPF = 1 then nop
else do
   address TSO "EXECIO 0 DISKW" ispfDD "(FINIS"
   "LMINIT DATAID(VIEWDD) DDNAME("ispfDD")"
   "BROWSE DATAID("viewDd")"
   "LMFREE DATAID("viewDd")"
   address TSO "FREE  F("ispfDD")"
   end

return 0

/* ------------------------------------------------------------ *
 * Loop through and pick up all possible Parms. Each parm       *
 * will then be examined later to have appropriate values       *
 * parsed out and stored into different var (in another         *
 * routine: Obtain_Kw)                                          *
 * ------------------------------------------------------------ */

Get_Parms:

arg inParms

parse value inParms with myDsn inParms
parse value myDsn with inDsn '(' delM ')' endQuote
inDsn = STRIP(inDsn)||STRIP(endQuote)
delM  = STRIP(delM)

if WORDS(inParms) > 0 then do
   do i=1 to WORDS(inParms)
      parse value WORD(inParms,i) with inOption .
      if INDEX(inOption,'(') > 0 then do
         call Obtain_Kw
         end
      else do
         X=Syntax_Err()
         end
      end
   end
return 0

/* ------------------------------------------------------------ *
 * Parse input to pick up appropriate parms                     *
 * ------------------------------------------------------------ */

Obtain_Kw:
parse value inOption with keyWord "(" contents ")"
contents = STRIP(contents)
select
   when ABBREV('VOLUME',keyWord,1) = 1 then do
      inVol = contents
      end
   when ABBREV('MASK',keyword,2) = 1 then do
      if contents = "YES" then massOpt = 1
      end
   otherwise do
      X=Syntax_Err()
      end
   end
return 0


Syntax_Err:
X=W("Valid syntax is:" exec_Name ,
    "PDSname(mem) - optional VOLUME(zzzzzz)",
    "MASK(YES)")
X=W("If member name contains masking character (% or *),",
    "MASK(YES) is required.",12,0)
x=View_Data()
exit 12
return 0

/* ------------------------------------------------------------ *
 * This is to issue error message.  At the same time, set the   *
 * ISPF return code to whatever being passed (ready to exit).   *
 * This is the only way for ISPSTART to end with a non-zero RC. *
 * 3rd parm = line-prefix, if 0, then blank, if not there, use  *
 * normal prefix, any other values will use that as prefix.     *
 * ------------------------------------------------------------ */

W:
parse arg errMsg,errCode,inputPfx

select
   when inputPfx = "0" then myPfx = pfxblk
   when inputPfx = "" then myPfx = pfx
   otherwise myPfx = inputPfx
   end

if batISPF = 1 then do
   say myPfx errMsg
   end
else do
   queue myPfx errMsg
   address TSO "EXECIO 1 DISKW" ispfDD
   end
if errCode <> "" then do
   zispfrc = errCode
   address ISPEXEC "VPUT (ZISPFRC) SHARED"
   end
return 0

