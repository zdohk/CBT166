/* -------------------------- REXX ------------------------------ *
 *                                                                *
 *               $$$$ M   M  CCCC  OOO  PPPP  Y   Y               *
 *              $ $   MM MM C     O   O P   P  Y Y                *
 *               $$$  M M M C     O   O PPPP    Y                 *
 *                $ $ M   M C     O   O P       Y                 *
 *              $$$$  M   M  CCCC  OOO  P       Y                 *
 *                                                                *
 * This exec copies member(s) from one PDS to another PDS using   *
 * ISPF services and therefore maintains the ENQ across. The exec *
 * provides same function under Batch ISPF as option 3.3 under    *
 * on-line ISPF.                                                  *
 *                                                                *
 * Syntax - $MCOPY PDSname(mem) outPutPDS                         *
 *               FROM(vol111)  TO(vol222)                         *
 *               REPLACE                                          *
 *          PDSname - Input PDS - Required                        *
 *          mem - Members to be copied - Required                 *
 *             Mask can be used for xxx, i.e. A*, AA%%B, etc.     *
 *          outPutPDS - Output PDS - Required                     *
 *          FROM(vol111) - Optional - Volser of Input PDS         *
 *          TO(vol222) - Optional - Volser of Output PDS          *
 *          REPLACE - Optional - Use COPY with Replace Option     *
 *                                                                *
 * Note that ALL KEYWORDS can be abbreviated, i.e. F(ROM), T(O),  *
 * as long as they are distinguishable.  MEMLIST can have masks,  *
 * i.e. M%1, A*, etc...                                           *
 *                                                                *
 * 02/16/15 - VNV - First added.                                  *
 *                                                                *
 * -------------------------------------------------------------- */

inDsn    = ""
outDsn   = ""
fromVol  = ""
toVol    = ""
replOpt  = ""                                /* Blank or REPLACE */
memList  = ""
pfxhead  = " =>"
pfx      = "  >"
pfxblk   = "   "
pfxprt   = " .."

parse source . . exec_Name .

if SYSVAR("SYSENV") = "BACK" then do
   batIspf = 1
   end
else do
   if sysvar(SYSISPF) <> "ACTIVE" then do       /* under READY mode */
      parse UPPER arg allParms
      queue "ISPSTART CMD("exec_Name allParms") NEWAPPL(ISR)"
      exit
      end
   batIspf = 0
   ispfDd  = '$#$'||STRIP(TIME("S"))
   x = outtrap("trap.","*")
   address TSO "FREE  F("ispfDD")"
   address TSO "ALLOC F("ispfDD") SPACE(5 2) CYL DSORG(PS)"  ,
               "LRECL(1024) RECF(F B)"
   address TSO "MAKEBUF"
   tempRc = rc
   x = outtrap("off")
   end

saveEnv = ADDRESS()
address ISPEXEC

$sysid  = STRIP(MVSVAR('SYSNAME'))

X=W(,,0)
X=W("COPY processing starts on" ,
     $sysid "at" TIME() "on" DATE('U')".",,pfxhead)

parse UPPER arg allParms

X=W("Cmd Input =>" exec_Name allParms,,0)
X=W(,,0)

if allParms = "" then do
   x=Syntax_Err()
   end

x = Get_Parms(allParms)
if inDsn = "" | outDsn  = "" | memList = "" then do
   X=Syntax_Err()
   end

/* --------------------------------------------------------- *
 * To obtain the fully qualified Data set name in case the   *
 * PDSNAME supplied from parm did not have single quotes     *
 * around the name.                                          *
 * --------------------------------------------------------- */

inDsn    = Ck_Dsn(inDsn,fromVol)
myInVol  = SYSVOLUME
x=Print_Dsn()
outDsn   = Ck_Dsn(outDsn,toVol)
myOutVol = SYSVOLUME
x=Print_Dsn()

x=W(,,0)

if (inDsn = outDsn) & (myInVol = myOutVol) then do
   X=W("Input and Output DSNs are the same - RC=12.",12,0)
   x=View_Data()
   exit 12
   end

if fromVol <> "" then do
   inXt = "VOLUME("fromVol")"
   inMsg = " on" fromVol
   end
else do
   inXt = ""
   inMsg = ""
   end

if toVol <> "" then do
   outXt = "VOLUME("toVol")"
   outMsg = " on" toVol
   end
else do
   outXt = ""
   outMsg = ""
   end

if INDEX(memList,'*') > 0 | ,
   INDEX(memList,'%') > 0 then do
   massCopy = 1
   end
else do
   massCopy = 0
   end

/* ------------------------------------------------------------ *
 * Everything looks fine here.  Continue to process the PDSes   *
 * ------------------------------------------------------------ */
"CONTROL ERRORS RETURN"

"LMINIT DATAID(inId) DATASET('"inDsn"') ENQ(SHR)" inXt
if rc > 0 then do
   X=W("Err:" STRIP(zerrlm))
   X=W("INIT error for dataset" inDsn||inMsg "- RC=12.",12,0)
   x=View_Data()
   exit 12
   end

/* ------------------------------------------------------------ *
 * If member mask is used, then list all members with matching  *
 * names first (just for documentation purpose).                *
 * ------------------------------------------------------------ */

if massCopy = 1 then do

   x=W("Checking names that match" memList":")
   X=W(,,0)

   "LMOPEN DATAID("inId") OPTION(INPUT)"
   if rc > 0 then do
      X=W("Err:" STRIP(zerrlm))
      X=W("OPEN error for dataset" inDsn||inMsg "- RC=12.",12,0)
      "LMFREE DATAID("inId")"
      x=View_Data()
      exit 12
      end

   varList = ""
   listRc = 0
   do until listRc > 0
      "LMMLIST DATAID("inId") MEMBER(VARLIST) PATTERN("memList")"
      listRc = rc
      select
         when listRc = 0 then do
            x=W("... Matching member name:" varList,,0)
            end
         when listRc = 4 then do
            x=W("No matching member found for" memList "- RC=8.",8,0)
            "LMCLOSE DATAID("inId")"
            "LMFREE DATAID("inId")"
            x=View_Data()
            exit 8
            end
         when listRc = 8 then do
            "LMMLIST DATAID("dataid") MEMBER(VARLIST)" ,
              "OPTION(FREE)"
            end
         otherwise do
            X=W("Err:" STRIP(zerrlm))
            X=W("LIST error for dataset" inDsn||inMsg ,
                   "- RC=12.",12,0)
            "LMCLOSE DATAID("inId")"
            "LMFREE DATAID("inId")"
            x=View_Data()
            exit 12
            end
         end                               /* select        */
      end                                  /* Do until      */
   end                                     /* if massCopy   */

"LMINIT DATAID(outId) DATASET('"outDsn"') ENQ(SHRW)" outXt
if rc > 0 then do
   X=W("Err:" STRIP(zerrlm))
   X=W("INIT error for dataset" outDsn||outMsg "- RC=12.",12,0)
   "LMFREE DATAID("inId")"
   x=View_Data()
   exit 12
   end

"LMCOPY FROMID("inId") TODATAID("outid") FROMMEM("memList")" replOpt
tempRc = rc

/* ------------------------------------------------------------ *
 * Issued the COPY. Now check return codes.                     *
 * ------------------------------------------------------------ */

if massCopy = 1 then x=W(,,0)

exitCc = 0

select
   when tempRc = 0 then do
      X=W(memList "successfully copied from" inDsn||inMsg "to" ,
             outDsn||outMsg "- RC=0.",0,0)
      end
   when tempRc = 4 then do
      X=W("Err:" STRIP(zerrlm))
      X=W(memList "not available - RC=8.",8,0)
      exitCC = 8
      end
   when tempRc = 8 then do
      X=W(memList "not found in" inDsn||inMsg "- RC=8",8,0)
      exitCC = 8
      end
   otherwise do
      X=W("Err:" STRIP(zerrlm))
      X=W("COPY error from" inDsn||inMsg "to" ,
             outDsn||outMsg "- RC=12.",12,0)
      exitCC = 12
      end
   end                                    /* select */

x=View_Data()

"LMFREE DATAID("inId")"
"LMFREE DATAID("OutId")"

address saveENV

exit exitCC


Print_Dsn:
x=W(STRIP(SYSDSNAME)                ,
    "V("STRIP(SYSVOLUME)")"         ,
    "RECF("STRIP(SYSRECFM)")"        ,
    "LRECL("STRIP(SYSLRECL)")"       ,
    "BLKS("STRIP(SYSBLKSIZE)")"      ,
     LEFT(STRIP(SYSUNITS),3)         ,
    "SP("STRIP(SYSPRIMARY) STRIP(SYSSECONDS)")",,pfxPrt)
return 0


View_Data:

X=W(,,0)
X=W("Processing ends on",
    $sysid "at" TIME() "on" DATE('U')".",,pfxhead)
X=W(,,0)

if batISPF = 1 then nop
else do
   address TSO "EXECIO 0 DISKW" ispfDD "(FINIS"
   "LMINIT DATAID(VIEWDD) DDNAME("ispfDD")"
   "BROWSE DATAID("viewDd")"
   "LMFREE DATAID("viewDd")"
   address TSO "FREE  F("ispfDD")"
   end

return 0

/* ------------------------------------------------------------ *
 * Loop through and pick up all possible Parms. Each parm       *
 * will then be examined later to have appropriate values       *
 * parsed out and stored into different var (in another         *
 * routine: Obtain_Kw)                                          *
 * ------------------------------------------------------------ */

Get_Parms:

arg inParms

parse value inParms with myDsn inParms
parse value myDsn with inDsn '(' memList ')' endQuote

inDsn    = STRIP(inDsn)||STRIP(endQuote)
memList  = STRIP(memList)

posParm  = 0
if WORDS(inParms) > 0 then do
   do i=1 to WORDS(inParms)             /* process all parms left */
      parse value WORD(inParms,i) with inOption .
      if INDEX(inOption,'(') > 0 then do
         call Obtain_Kw
         iterate
         end
      else do                           /* parms w/o '(' and ')'  */
         posParm = posParm + 1
         select
            when posParm = 1 then do    /* 1st parm = outDSN      */
               outDsn = STRIP(inOption)
               iterate
               end
            when posParm = 2 then do    /* 2nd parm has to be REP */
               if ABBREV('REPLACE',inOption,1) = 1 then do
                  replOpt  = "REPLACE"
                  iterate
                  end
               else do                  /* unknown parm ??        */
                  X=W("Unknown parm as:" inOption "- RC=12.",12,0)
                  x=View_Data()
                  exit 12
                  end
               end
            otherwise do                /* too many parms w/o     */
               X=W("Too many parms - RC=12.",12,0)
               x=View_Data()
               exit 12
               end
            end                         /* select                 */
         end                            /* parms w/o '(' and ')'  */
      end                               /* do i=1                 */
   end                                  /* if WORDS(..            */

return 0

/* ------------------------------------------------------------ *
 * Parse input to pick up appropriate parms                     *
 * ------------------------------------------------------------ */

Obtain_Kw:
parse value inOption with keyWord "(" contents ")"
contents = STRIP(contents)
select
   when ABBREV('FROM',keyWord,1) = 1 then do
      fromVol = contents
      end
   when ABBREV('TO',keyWord,1) = 1 then do
      toVol = contents
      end
   otherwise do
      X=Syntax_Err()
      end
   end
return 0


Syntax_Err:
X=W("Valid syntax is:" exec_Name ,
    "inPDS(mem) outPDS - optional FROM(v1) TO(v2)",
    "REPLACE")
X=W("Member name can have masking characters (% or *).",12,0)
x=View_Data()
exit 12
return 0


/* ------------------------------------------------------------ *
 * This is to issue error message.  At the same time, set the   *
 * ISPF return code to whatever being passed (ready to exit).   *
 * This is the only way for ISPSTART to end with a non-zero RC. *
 * 3rd parm = line-prefix, if 0, then blank, if not there, use  *
 * normal prefix, any other values will use that as prefix.     *
 * ------------------------------------------------------------ */

W:
parse arg errMsg,errCode,inputPfx

select
   when inputPfx = "0" then myPfx = pfxblk
   when inputPfx = "" then myPfx = pfx
   otherwise myPfx = inputPfx
   end

if batISPF = 1 then do
   say myPfx errMsg
   end
else do
   queue myPfx errMsg
   address TSO "EXECIO 1 DISKW" ispfDD
   end
if errCode <> "" then do
   zispfrc = errCode
   address ISPEXEC "VPUT (ZISPFRC) SHARED"
   end
return 0


Ck_Dsn:
parse arg myDsn,myVol

if myVol <> "" then do
   xTra    = "VOLUME("myVol")"
   xTraMsg = " on" inVol
   end
else do
   xTra    = ""
   xTraMsg = ""
   end

temp = myDsn "DIRECTORY NORECALL" xTra
tempRc = LISTDSI(temp)
if tempRc = 16 then do
   if SYSREASON = 9 then do
      X=W("Data set" myDsn "has been migrated - RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   If SYSREASON = 5 then do
      X=W("Data set" myDsn "not cataloged - RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   else do
      X=W(SYSMSGLVL2)
      X=W("LISTDSI error for" myDsn ,
             "- SYSREASON=" SYSREASON "- RC=12.",12,0)
      x=View_Data()
      exit 12
      end
   end

myDsn = sysdsname

if SUBSTR(sysdsorg,1,2) <> "PO" then do
   X=W("Data set is not a PDS:" myDsn||xTraMsg "- RC=12.",12,0)
   x=View_Data()
   exit 12
   end

return myDsn
