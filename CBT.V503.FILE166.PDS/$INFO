 /********************* $INFO    REXX/CLIST      *********************/
 /* $INFO                                                            */
 /*   This exec displays the indicators which SRM uses to determine  */
 /*   whether system MPL needs to be adjusted.  These indcators      */
 /*   include CPU util, UIC, Page fault rate, Fixed store below 16M  */
 /*   and below & above 16m pct.  The CPU Util % will also be        */
 /*   displayed as a bar chart, whereas the color will change        */
 /*   accordingly.  All indicator thresholds are displayed along     */
 /*   with the current measurement whose color will also change.     */
 /*   The final decision for MPL adjustment is shown at the bottom   */
 /*   with the appropriate color as well.                            */
 /*                                                                  */
 /* SYNTAX: $INFO                                                    */
 /*                                                                  */
 /********************************************************************/

If Sysvar(SYSISPF) Â¬='ACTIVE' Then Do
   Parse Source . . EXEC_NAME .
   Say '***' EXEC_NAME 'can only run under ISPF...'
   Exit
   End

Numeric Digits 256

YELLOW  = 'YELLOW'
WHITE   = 'WHITE'
RED     = 'RED'
GREEN   = 'GREEN'
TURQ    = 'TURQ'
PINK    = 'PINK'
FLENG   = 6

CVT     = Get_Stor('10'x)
RCE     = Get_Stor(CVT,'490'x)
RMCT    = Get_Stor(CVT,'25C'x)
RCT     = Get_Stor(RMCT,'E4'x)
CCT     = Get_Stor(RMCT,4)
MCT     = Get_Stor(RMCT,'C'x)
CSD     = Get_Stor(CVT,'294'x)
RCE     = Get_Stor(CVT,'490'x)
SMCAADD = Get_Stor(CVT,'C4'x)
SMF     = Get_Stor(SMCAADD,'10'x)
PVTADD  = Get_Stor(CVT,'2FC'x)

MACH    = C2X(Get_Stor(CVT,-6,2))
NUM_CPU = C2D(Get_Stor(CSD,'A'x,2))
CP      = NUM_CPU
SU      = C2D(Get_Stor(RMCT,64))
SUSEC   = Strip(Format((16000000/SU),8,2))
RSTORE  = (C2D(Get_Stor(CVT,'358'x))/1024)||'M'
ESTORE  = (C2D(Get_Stor(RCE,'A0'x))*4)/1024||'M'

LATENT_DEMAND = 7*NUM_CPU
TOO_MUCH_STRESS = LATENT_DEMAND + (7*2)
SETUP:

COUNTER = 0                 /* Used to maintain MPL adjustment flag  */

LOUIC   = C2D(Get_Stor(RCT,4,2))                  /*   UIC   */
HIUIC   = C2D(Get_Stor(RCT,6,2))
UIC     = C2D(Get_Stor(RCT,'36'x,2))
OUIC    = Center(UIC,FLENG)

LOCPU   = C2D(Get_Stor(RCT,8,2))/16               /*  CPU Util  */
HICPU   = C2D(Get_Stor(RCT,10,2))/16
AVGCPU  = Format(C2D(Get_Stor(RCT,'38'x,2))/16,3,0)
REALCPU = C2D(Get_Stor(CCT,102,2))
CPU     = REALCPU||'%'
OCPU    = Center(AVGCPU,FLENG)

LOPRTE  = C2D(Get_Stor(RCT,'C'x,2))        /* Page fault rate */
HIPRTE  = C2D(Get_Stor(RCT,'E'x,2))
PRTE = C2D(Get_Stor(RCT,'40'x,2))
OPRTE   = Center(PRTE,FLENG)

LOFIX   = C2D(Get_Stor(RCT,'78'x,2))      /* Fixed storage (all) */
HIFIX   = C2D(Get_Stor(RCT,'7A'x,2))
AVGFIX  = C2D(Get_Stor(RCT,'80'x,2))
OFIX    = Center(AVGFIX,FLENG)

LOBELOW = C2D(Get_Stor(RCT,'7C'x,2))      /* Fixed storage < 16M */
HIBELOW = C2D(Get_Stor(RCT,'7E'x,2))
AVGBELOW= C2D(Get_Stor(RCT,'82'x,2))
OBELOW  = Center(AVGBELOW,FLENG)

XDD     = Date('U')
XTIME   = Time()

Select
   When UIC < LOUIC Then Do
      COUNTER = COUNTER-5
      UICCLR = RED
      End
   When UIC > HIUIC Then Do
      UICCLR = GREEN
      COUNTER = COUNTER+1
      End
   Otherwise Do
      UICCLR = WHITE
      End
   End

Select
   When AVGCPU < LOCPU Then Do
      CPUCLR = GREEN
      COUNTER = COUNTER+1
      End
   When AVGCPU > HICPU Then Do
      CPUCLR = RED
      COUNTER = COUNTER-5
      End
   Otherwise Do
      CPUCLR = WHITE
      End
   End


Select
   When PRTE < LOPRTE Then Do
      PRTCLR = GREEN
      COUNTER = COUNTER+1
      End
   When PRTE > HIPRTE Then Do
      PRTCLR = RED
      COUNTER = COUNTER-5
      End
   Otherwise Do
      PRTCLR = WHITE
      End
   End


Select
   When AVGBELOW < LOBELOW Then Do
      BELCLR = GREEN
      COUNTER = COUNTER+1
      End
   When AVGBELOW > HIBELOW Then Do
      BELCLR = RED
      COUNTER = COUNTER-5
      End
   Otherwise Do
      BELCLR = WHITE
      End
   End

Select
   When AVGFIX < LOFIX Then Do
      FIXCLR = GREEN
      COUNTER = COUNTER+1
      End
   When AVGFIX > HIFIX Then Do
      FIXCLR = RED
      COUNTER = COUNTER-5
      End
   Otherwise Do
      FIXCLR = WHITE
      End
   End

Select
   When COUNTER < 0 Then Do
      MPLCLR = RED
      MFLG = Center('Decr',FLENG)
      End
   When COUNTER = 5 Then Do
      MPLCLR = GREEN
      MFLG = Center('Incr',FLENG)
      End
   Otherwise  Do
      MPLCLR = WHITE
      MFLG = Center('None',FLENG)
      End
   End

TL = REALCPU%2
CPUBAR = Center(CPU,TL,'-')
If REALCPU < 91  Then Do
   CPUBAR = Left(CPUBAR,TL)||Copies('o',50-TL)
   CPUMASK = Copies('#',TL)||Copies('}',50-TL)
   End
Else If REALCPU < 100 Then Do
   CPUBAR = Left(CPUBAR,TL)||Copies('o',50-TL)
   CPUMASK = Copies('_',TL)||Copies('}',50-TL)
   End
Else Do
   TL = (REALCPU-100)%2
   CPUMASK = Copies('~',50)||Copies('{',TL)
   CPUBAR = Left(CPUBAR,50)||Copies('x',TL)
   End

MIGR    = C2D(Get_Stor(MCT,'14C'x))
AFQA    = C2D(Get_Stor(RCT,'3C'x,2))
DLY     = Format(C2D(Get_Stor(RCT,'16'x,2))/16,3,0)
BADCPU  = ''
BADFL   = 'BLINK'
If DLY = 0 Then Do
   DLY = ''
   DLFLAG = 'USCORE'
   WAITFL = TURQ
   End
Else Do
   DLFLAG = 'REVERSE'
   BADCLR = TURQ
   If DLY > LATENT_DEMAND Then Do
      BADCPU = Center('<< CPU Under Stress >>',26)
      BADFL  = 'REVERSE'
      If DLY > TOO_MUCH_STRESS Then Do
         BADCLR = RED
         WAITFL = RED
         End
      Else Do
         BADCLR = YELLOW
         WAITFL = YELLOW
         End
      End
   Else WAITFL = TURQ
   End
/*  Look for other kind of SRM info as well                    */

SWPRT   = C2D(Get_Stor(RCT,'42'x,2))
TPAGE   = C2D(Get_Stor(RCT,'44'x,2))
TLPGIN  = C2D(Get_Stor(RCE,'44'x))
TLPGOUT = C2D(Get_Stor(RCE,'58'x))
TLFIXED = C2D(Get_Stor(RCE,'78'x))
TLEUSE  = C2D(Get_Stor(RCE,'A4'x))
TLESYS  = C2D(Get_Stor(RCE,'A0'x))
TLEPCT  = Format(((TLEUSE*100)/TLESYS),3,2)||'%'
TLRSYS  = C2D(Get_Stor(RCE,'4'x))


Address ISPEXEC 'ADDPOP COLUMN(5)'
Address ISPEXEC 'DISPLAY PANEL($INFOPNL)'
TRC = Rc
Address ISPEXEC 'REMPOP'
If TRC < 8 Then Signal SETUP

Exit

Get_Stor: PROCEDURE

/*------------------------------------------------------------------*/
/*                                                                  */
/*      This procedure will extract data using the MVS Storage      */
/*      function. Input arguments will be:                          */
/*                                                                  */
/*      1) Storage_Pointer or Literal, i.e. CVTPTR or '10'x, or     */
/*         16 (like '10'x)                                          */
/*      2) Offset in hex or dec (numnbe), i.e. 'FF'x or 256 or      */
/*         D2C(256)                                                 */
/*      3) Length of returned data in decimal, i.e. 256             */
/*                                                                  */
/*      NOTE - To make sure that this procedure will work all the   */
/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */
/*      of the calling REXX exec.                                   */
/*                                                                  */
/*------------------------------------------------------------------*/

Parse Arg AREA,OFFSET,LENG

If Arg(2,'O') Then OFFSET=0

If Arg(3,'O') Then LENG=4

If DataType(AREA) = 'CHAR' Then Do
   AREA =  C2D(AREA)
   End

If DataType(OFFSET) = 'CHAR' Then Do
   OFFSET =  C2D(OFFSET)
   End

Return  Storage((D2X(AREA+OFFSET)),LENG)

