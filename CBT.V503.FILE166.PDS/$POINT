/*                           Rexx                                */
/* ------------------------------------------------------------- *
 *                                                               *
 * To grab the data set name at where the cursor is and brings   *
 * up a panel showing data set characteristics and also allows   *
 * it to be edited, browsed, etc... For the data set types that  *
 * ISPF cannot handle, i.e. VSAM, Loadlib, FileAid will be       *
 * invoked instead.                                              *
 *                                                               *
 * It is best used by setting up a PF key to say 'TSO %$POINT'   *
 * and then cursor down to a data set name any where on the      *
 * screen and hit that PF key.  Also note that because most      *
 * of the ISPF applications now use their own PFKEY settings,    *
 * this may have to be done in several places, i.e. SDSF, EDIT,  *
 * TSO Command Option 6, etc.. Just type in KEYS where the       *
 * command line is, and then change one of the PF key to say     *
 * 'TSO %$POINT' (without the single quotes). The best key to    *
 * use would normally be PF4.                                    *
 *                                                               *
 * Author - Vinh Vu                                              *
 * Date-written - 3/6/2003                                       *
 *                                                               *
 * External Rexx execs used in conjunction with this:            *
 *    $PDS - Used for PDSAA command (CBT Tape - file 182).       *
 *    $LIBR - To invoke Librarian function                       *
 *                                                               *
 * ------------------------------------------------------------- */

if sysvar(SYSISPF) ¬='ACTIVE' then do
   parse source . . exec_Name .
   say exec_Name 'can only run under ISPF.'
   exit
   end

main_Panel = '$$PT01##'

cvtadd  = Get_Stor('10'x)
sysid   = LEFT(STRIP(Get_Stor(cvtadd,'154'x,8)),8)
myId    = LEFT(STRIP(USERID()),7)

address ISPEXEC

'VGET (ZSCREEN,ZSCREENI,ZSCREENC,ZENVIR,ZSCREENW,ZSCREEND)'

/* --------------------------------------------------------- *
 * Figuring out the data set name                            *
 * --------------------------------------------------------- */

valid_Data  = XRANGE('A','I')||XRANGE('J','R')||XRANGE('S','Z')||,
              XRANGE('0','9')||'.()$#@-'

myWord = ''

startOfLine = (zscreenc%zscreenw)*zscreenw
zscreenc  = zscreenc + 1
endOfLine =  startOfLine+zscreenw
/*  Debug
t = SUBSTR(zscreeni,1,(endOfLine-startOfLine)*24)
   say t
    Debug */
do i=zscreenc by -1 to startOfLine+1
   letter = SUBSTR(zscreeni,i,1)
   if INDEX(valid_Data,TRANSLATE(letter)) = 0 then leave
   myWord = myWord||letter
   end

myWord = REVERSE(myWord)

if myWord <> '' then do
   do i=zscreenc+1 by 1 to endOfLine
      letter = SUBSTR(zscreeni,i,1)
      if INDEX(valid_Data,TRANSLATE(letter)) = 0 then leave
      myWord = myWord||letter
      end
   end
else do
   zedsmsg = ''
   zedlmsg = 'Data set name cannot be blank.'
   'SETMSG MSG(ISRZ001)'
   exit
   end

if SUBSTR(myWord,1,1) = '('   &,
   SUBSTR(myWord,LENGTH(myWord),1) = ')' then do
   parse var myWord '(' myWord ')'
   end

x = Validate_Dataset_Name(myWord)   /* Error msgs will be returned */
                                    /* if there are any.           */

if x <> '' then do
   zedsmsg = ''
   zedlmsg = x
   'SETMSG MSG(ISRZ001)'
   exit
   end

plain_Dsn = $dsn
$dsn      = "'"$dsn"'"

HFSdsat   = 0

/* --------------------------------------------------------- *
 * Collect information about the data set to be displayed    *
 * on the panel.                                             *
 * --------------------------------------------------------- */

msg_Status = MSG("OFF")
x = LISTDSI($dsn 'DIRECTORY NORECALL')
temp = MSG(msg_Status)                 /* resets message value */

zedlmsg = ""

if x=16 then do
   select
      when sysreason = 9 then do
         zedlmsg = $dsn 'has been migrated.'
         gotReply = 0
         do until gotReply
            say $dsn 'is a migrated data set.'
            say 'Do you want to recall the data set, Y or N ?'
            pull ans
            select
               when ans = 'Y' then do
                  address TSO 'HRECALL' $dsn
                  say $dsn 'has been recalled.  Come back later.'
                  gotReply = 1
                  end
               when ans = 'N' then do
                  say 'HRECALL was not requested for' $dsn'.'
                  gotReply = 1
                  end
               otherwise nop
               end
            end
         end
      when sysreason = 3 then do
         HFSdsat = 1
         end
      when sysreason = 5 then do
         zedlmsg = TRANSLATE($dsn) 'is not cataloged.'
         end
      otherwise do
         zedlmsg = 'LISTDSI RC16 - Sysreason=' sysreason'.' ,
                   sysmsglvl2 ' ==>>  Dsn='TRANSLATE($dsn)
         end
      end                                  /* select   */
   end                                     /* if x=16  */

if zedlmsg <> '' then do
   zedsmsg = ""
   'SETMSG MSG(ISRZ001)'
   exit
   end

"DSINFO DATASET("$dsn")"

$apfFlag = zdsapf
$lltFlag = zdslnk

$action = ''

if HFSdsat then do
   $vol    = zdsvol
   $dsorg  = zdsdsnt
   $alctyp = STRIP(zdsspc)
   $xtents = STRIP(zdsexta)
   $alcpri = STRIP(zds1ex)
   $alcsec = STRIP(zds2ex)
   $cdate  = SUBSTR(zdscdate,6,5)||"/"||SUBSTR(zdscdate,3,2)
   $rdate  = SUBSTR(zdsrdate,6,5)||"/"||SUBSTR(zdsrdate,3,2)
   $alloc  = STRIP(zdstota)
   $used   = STRIP(zdstotu)
   $recfm  = STRIP(zdsrf)
   $lrecl  = STRIP(zdslrec)
   $blksz  = STRIP(zdsblk)
   $diralc = STRIP(zdsdira)
   $diruse = STRIP(zdsdiru)
   $memnum = STRIP(zds#mem)
   end
else do
   $vol    = sysvolume
   $dsorg  = sysdsorg
   $alctyp = sysunits
   $xtents = sysextents
   $alcpri = sysprimary
   $alcsec = sysseconds
   $cdate  = SUBSTR(zdscdate,6,5)||"/"||SUBSTR(zdscdate,3,2)
   $rdate  = SUBSTR(zdsrdate,6,5)||"/"||SUBSTR(zdsrdate,3,2)
   $alloc  = sysalloc
   $used   = sysused
   $recfm  = sysrecfm
   $lrecl  = syslrecl
   $blksz  = sysblksize
   $diralc = sysadirblk
   $diruse = sysudirblk
   $memnum = sysmembers
   end


ddname  = '$'||STRIP(TIME('S'))||RANDOM(10,99)

address TSO 'ALLOC F('DDNAME') REUSE NEW DEL DSO(PO) DIR(1) SP(1)' ,
            'TRACK RECFM(F B) LRECL(80)'
'LMINIT DATAID(DID)  DDNAME('ddname') ENQ(EXCLU)'
'LMOPEN DATAID(&DID) OPTION(OUTPUT)'

/* --------------------------------------------------------- *
 * Build ISPF panels on the fly.                             *
 * --------------------------------------------------------- */

call W ")ATTR                                                          "
call W " { TYPE(TEXT)  CAPS(OFF)                  COLOR(TURQ)          "
call W " ~ TYPE(TEXT) CAPS(OFF) HILITE(REVERSE) COLOR(YELLOW)          "
call W " | TYPE(INPUT) HILITE(USCORE)             COLOR(TURQ)          "
call W " # TYPE(TEXT)  CAPS(OFF)  HILITE(REVERSE) COLOR(GREEN)         "
call W " % TYPE(TEXT)  CAPS(OFF)                                       "
call W " + TYPE(TEXT)  CAPS(OFF)                  COLOR(WHITE)         "
call W " ¦ TYPE(TEXT)  CAPS(OFF)  HILITE(USCORE)  COLOR(YELLOW)        "
call W " ! TYPE(TEXT)  CAPS(OFF)                  COLOR(YELLOW)        "
call W " @ TYPE(OUTPUT) JUST(ASIS) COLOR(GREEN)                        "
call W " } TYPE(OUTPUT) JUST(ASIS) COLOR(PINK)                         "
call W " ¬ TYPE(OUTPUT) JUST(ASIS)  HILITE(REVERSE) COLOR(RED)         "
call W " _ TYPE(OUTPUT) JUST(ASIS)                  COLOR(WHITE)       "
call W ")BODY WINDOW(65,18) EXPAND(``)                                 "
call W "@ZDATESTD   {`-`~Data Set Summary{`-`@ZTIMEL     +             "
call W "+Command%===>|ZCMD                                             "
call W "+                                                              "
call W "+Action   !==>|Z+   ¦B+={Browse ¦E+={Edit ¦F+={FileAid Edit    "
call W "+                   ¦L+={LIBRIAN¦V+={View ¦W+={WorkPlace       "
call W "+                   ¦\+={DSList ¦/+={Other Action Command      "
call W "+DSN      !==>@$DSN                                           +"
call W "+Member   !==>|$MEM    +                                       "
call W "+                    CrDate!==>@$CDATE  + Refdate!==>@$RDATE  +"
call W "+Vol  !==>@$VOL  +    DSORG!==>@$DSORG+   Extents!==>@$XTENTS +"
call W "+AlcTp!==>}$ALCTYP +  Alloc!==>}$ALLOC  +    Used!==>}$USED +  "
call W "+                   Primary!==>}$ALCPRI + Secndry!==>}$ALCSEC +"
call W "+Recfm!==>@$RECFM+    Lrecl!==>@$LRECL+   Blksize!==>@$BLKSZ+  "
call W "{  APF!==>}$APFFLAG{ LnkLst!==>}$LLTFLAG+                      "
call W "{`-` << PDS Dir Information Only >>{`-`                        "
call W "+Alloc!==>@$DIRALC+    Used!==>@$DIRUSE+   MemNum!==>@$MEMNUM+ "
call W "{`-`                                                           "
call W "}sysid` `#Enter+To Proceed or#END+to Cancel+` `}myId   +"
call W ")INIT                                                          "
call W "   .ZVARS = '($ACTION)'                                        "
call W "   &ZCMD = ' '                                                 "
call W ")PROC                                                          "
call W "   VER (&$ACTION,NB,LIST,B,E,F,L,P,V,W,/,\)                    "
call W ")END                                                           "

'LMMADD DATAID(&DID) MEMBER('main_Panel')'

'LMFREE DATAID(&DID)'
'LIBDEF ISPPLIB LIBRARY ID('ddname') STACK'

'ADDPOP COLUMN(5)'
'DISPLAY PANEL('main_Panel')'
temprc = rc
'REMPOP'
'CONTROL ERRORS RETURN'

if temprc = 8 then do
   call Clean_Up
   exit
   end

/* --------------------------------------------------------- *
 * Clean up member name if DSORG is neither 'PO' nor 'POU'.  *
 * Otherwise, for 'View' and 'Browse', give error rc if      *
 * member does not exist.                                    *
 * --------------------------------------------------------- */

libr_mem = $mem                          /* Librarian member name  */

if FIND('PO POU',$dsorg) = 0 then $mem = ''
else do
   if $mem <> '' then do
      $dsn = "'"plain_dsn"("$mem")'"
      if $action = 'B' | $action = 'V' then do
         msg_Status = MSG("OFF")
         x = SYSDSN($dsn)
         temp = MSG(msg_Status)          /* resets message value */
         if x <> "OK" then do
            zedsmsg = ''
            zedlmsg = x'.'
            'SETMSG MSG(ISRZ001)'
            call Clean_Up
            exit
            end    /* if x <> "OK"  */
         end       /* if $action    */
      end          /* if $mem       */
   end             /* else do       */

/* --------------------------------------------------------- *
 * When I get here, we'll take action based on input command.*
 * For anything that ISPF cannot handle, FileAid (Compuware) *
 * will be invoked instead.                                  *
 * --------------------------------------------------------- */

nonIspf = 'DA DAU IS ISU VS'     /* ISPF cannot handle these dsats */

select

/* --------------------------------------------------------- *
 * This is 'Browse' function.  FileAid used if necessary.    *
 * --------------------------------------------------------- */

   when $action = 'B' then do               /*  Browse data set  */
      if FIND(nonIspf,$dsorg) > 0 | $recfm = 'VBS' then do
         zedsmsg = '*** FileAid Browse ***'
         zedlmsg = 'ISPF Browse cannot handle this data set.',
                   'FileAid is now invoked.'
         'SETMSG MSG(ISRZ000)'
         'SELECT CMD(%FADYNALC 1 DSN('$dsn') QUOTE) NEWAPPL(FAXX)'
         end
      else do
         'BROWSE DATASET('$dsn')'
         x = Check_ReturnCode(rc,'B')
         end
      end

/* --------------------------------------------------------- *
 * This is 'View' function.  FileAid used if necessary.      *
 * --------------------------------------------------------- */

   when $action = 'V' then do               /*  View data set    */
      if FIND(nonIspf,$dsorg) > 0 | $recfm = 'VBS' then do
         zedsmsg = '*** FileAid Browse ***'
         zedlmsg = 'ISPF View cannot handle this data set.',
                   'FileAid is now invoked.'
         'SETMSG MSG(ISRZ000)'
         'SELECT CMD(%FADYNALC 1 DSN('$dsn') QUOTE) NEWAPPL(FAXX)'
         end
      else do
         'VIEW DATASET('$dsn')'
         x = Check_ReturnCode(rc,'V')
         end
      end

/* --------------------------------------------------------- *
 * This is 'Edit' function.  FileAid used if necessary.      *
 * --------------------------------------------------------- */

   when $action = 'E' then do               /*  Edit data set    */
      if FIND(nonIspf,$dsorg) > 0 | $recfm = 'VBS' |,
                                    $recfm = 'U' then do
         zedsmsg = '*** FileAid Edit ***'
         zedlmsg = 'ISPF Edit cannot handle this',
                   'data set. FileAid is now invoked.'
         'SETMSG MSG(ISRZ000)'
         'SELECT CMD(%FADYNALC 2 DSN('$dsn') QUOTE) NEWAPPL(FAXX)'
         end
      else do
         'EDIT DATASET('$dsn')'
         x = Check_ReturnCode(rc,'E')
         end
      end

/* --------------------------------------------------------- *
 * This is 'FileAid' function as requested by user.          *
 * --------------------------------------------------------- */

   when $action = 'F' then do               /*  FileAid Edit     */
      'SELECT CMD(%FADYNALC 2 DSN('$dsn') QUOTE) NEWAPPL(FAXX)'
      end

/* --------------------------------------------------------- *
 * This is 'Librarian' function (at Citigroup). Verification *
 * is done to ensure that DSORG is either 'DA' or 'DAU'.     *
 * --------------------------------------------------------- */

   when $action = 'L' then do               /*  Librarian        */
      if FIND('DA DAU',$dsorg) = 0 then do
         zedsmsg = '** Invalid DSORG **'
         zedlmsg = 'Non-Librarian DSORG for:' $dsn'.'
         'SETMSG MSG(ISRZ001)'
         end
      else do
         if libr_mem <> '' then do
            $dsn = "'"plain_dsn"("libr_mem")'"
            end
         queue '$LIBR' $dsn
         end
      end

/* --------------------------------------------------------- *
 * This is 'PDS' function (the old PDSAA command from the    *
 * CBT tape - file 182).  However, if a PDSE is found, then  *
 * go to ISPF 3.4 instead.                                   *
 * --------------------------------------------------------- */

   when $action = 'P' then do               /*  PDSAA command    */
      if FIND('PO POU',$dsorg) = 0 |,
         $diralc = 'NO_LIM'        then do  /*  PDSE             */
         zedsmsg = '** Invalid DSORG **'
         zedlmsg = 'PDSAA cmd can only handle Partitioned Data Set.'
         'SETMSG MSG(ISRZ001)'
         dsn_list = "'"||plain_Dsn||"'"     /*  Invoke DSLIST    */
         'SELECT PGM(ISRDSLST) PARM(DSL' dsn_list') SUSPEND'
         end
      else do
         queue '$PDS' "'"||plain_Dsn||"'"
         end
      end

/* --------------------------------------------------------- *
 * This '/' action will present another panel with the data  *
 * set name filled in already.  Commands can be entered      *
 * in front of DSN for further action, i.e. 'DELETE', etc.   *
 * --------------------------------------------------------- */

   when $action = '/' then do
      x = Flag_Notices()
      zcmd = '*       ' $dsn
      'VPUT (ZCMD)'
      'SELECT PGM(ISRRCL) PARM(C1) SUSPEND SCRNAME($POINT)'
      zcmd = ''
      'VPUT (ZCMD)'
      end

/* --------------------------------------------------------- *
 * This is 'DSLIST' function (ISPF 3.4).                     *
 * --------------------------------------------------------- */

   when $action = '\' then do               /*  DSLIST command   */

   /* --------------------------------------------------------- *
    *  The following will just bring up the 3.4 screen only     *
    *  with just the DSNAME filled in.                          *
    * --------------------------------------------------------- */

   /* zdldsnlv = plain_Dsn
      'VPUT (zdldsnlv) PROFILE'
      'SELECT PGM(ISRUDL) PARM(ISRUDLP)'    */

   /* --------------------------------------------------------- *
    *  The following will take you straight to the data set.    *
    * --------------------------------------------------------- */

      dsn_list = "'"||plain_Dsn||"'"
      'SELECT PGM(ISRDSLST) PARM(DSL' dsn_list') SUSPEND'
      end

/* --------------------------------------------------------- *
 * This is 'WorkPlace' function under ISPF.                  *
 * --------------------------------------------------------- */

   when $action = 'W' then do               /*  WorkPlace        */
      zwrkdsn = "'"plain_Dsn"'"
      zwrkvol = ''
      zreftype = 'D'
      'VPUT (zwrkdsn zwrkvol zreftype) PROFILE'
      'SELECT PGM(ISRUDA) PARM(ISRWORK) SCRNAME(WORK)'
      end

   otherwise nop

   end

call Clean_Up

exit

Clean_Up:

'LIBDEF ISPPLIB'
address TSO 'FREE F('ddname')'

return 0

Flag_Notices: procedure
zedsmsg = ''
zedlmsg = 'Change * to any valid command and hit Enter to',
          'execute or PF3 to cancel.  Once the command has',
          'been executed, hit PF3 to return to your original',
          'ISPF screen.'
'SETMSG MSG(ISRZ001)'
return 0

Check_ReturnCode: procedure

/* --------------------------------------------------------- *
 * This function checks ISPF return code for 'Edit', 'View'  *
 * and 'Browse' function.  Some of the common errors would   *
 * be Browsing non-existing members, Editing a data set      *
 * allocated as 'OLD' by other users, etc.                   *
 * --------------------------------------------------------- */

arg returnCode,function .
if returnCode = 0 then return 0

zedsmsg = ''

select

   when function = 'V' then do
      select
         when returnCode = 12 then,
            zedlmsg = 'VIEW has been disabled through the',
                      'ISPF configuration table.'
         when returnCode = 14 then,
            zedlmsg = 'Member or sequential data set is in use.'
         when returnCode = 16 then,
            zedlmsg = 'No matching members found in data set.'
         otherwise ,
            zedlmsg = 'Severe error - RC:'returnCode'.',
                      'Unable to continue.'
         end
      end

   when function = 'B' then do
      select
         when returnCode = 12 then,
            zedlmsg = 'Zero-length data; empty sequential or',
                      'zero-length member of a partitioned data set.'
         when returnCode = 14 then,
            zedlmsg = 'Specified member not found.'
         when returnCode = 16 then,
            zedlmsg = 'No matching members found in data set.'
         otherwise ,
            zedlmsg = 'Severe error - RC:'returnCode'.',
                      'Unable to continue.'
         end
      end

   when function = 'E' then do
      select
         when returnCode = 4 then,
            zedlmsg = ''
         when returnCode = 14 then,
            zedlmsg = 'Member or sequential data set is in use.'
         when returnCode = 16 then,
            zedlmsg = 'No matching members found in data set.'
         otherwise ,
            zedlmsg = 'Severe error - RC:'returnCode'.',
                      'Unable to continue.'
         end
      end

   otherwise nop

   end

'SETMSG MSG(ISRZ000)'

return 0


/* --------------------------------------------------------- *
 * Verifies the data set name and make sure that it is legit *
 * Check also made to ensure that if a member name is used,  *
 * it does conform to MVS standard.  Also, GDG names will be *
 * detected and rejected as well (we just can't handle it    *
 * for now).                                                 *
 * --------------------------------------------------------- */

Validate_Dataset_Name: procedure expose $dsn $mem

invalid_Mem = '.('

parse arg myWord

$dsn   = ''
$mem   = ''
retMsg = ''

if INDEX(myWord,'(') > 0 then do
   parse var myWord $dsn '(' $mem ')' residual
   $mem = STRIP($mem)

   select

      when $mem = '0' then do
         retMsg = 'Relative GDG is not currently supported.'
         end

      when $dsn = ''                      | ,
           residual <> ''                 | ,
           $mem = ''                      | ,
           DATATYPE($mem) = 'NUM'         | ,
           LENGTH($mem) > 8               | ,
           INDEX(invalid_Mem,$mem) > 0    | ,
           DATATYPE(SUBSTR($mem,1,1)) = 'NUM' then do
           retMsg = 'Data set name not valid as:' myWord'.'
         end

      otherwise nop

      end
   end
else do
   if DATATYPE(SUBSTR(myWord,1,1)) = 'NUM' then do
      retMsg = 'A relative GDG and/or invalid data set name detected.'
      end
   else $dsn = myWord
   end

return retMsg

W:
parse arg p1
"LMPUT DATAID(&DID) MODE(INVAR) DATALOC(P1) DATALEN(80)"
return


/*------------------------------------------------------------------*/
/*                                                                  */
/*      This procedure will extract data using the MVS Storage      */
/*      function. Input arguments will be:                          */
/*                                                                  */
/*      1) Storage_Pointer or Literal, i.e. CVTPTR or '10'x, or     */
/*         16 (like '10'x)                                          */
/*      2) Offset in hex or dec (numnbe), i.e. 'FF'x or 256 or      */
/*         D2C(256)                                                 */
/*      3) length of returned data in decimal, i.e. 256             */
/*                                                                  */
/*      NOTE - To make sure that this procedure will work all the   */
/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */
/*      of the calling REXX exec.                                   */
/*                                                                  */
/*------------------------------------------------------------------*/

Get_Stor: procedure

parse arg area,offset,leng

if ARG(2,'O') then offset=0

if ARG(3,'O') then leng=4

if DATATYPE(area) = 'CHAR' then do
   area =  C2D(area)
   End

if DATATYPE(offset) = 'CHAR' then do
   offset =  C2D(offset)
   End

return  STORAGE((D2X(area+offset)),leng)


