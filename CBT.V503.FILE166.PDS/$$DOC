Vinh Vu - 3/11/2020

Just added a couple of execs added for your entertainment:

$ALIDEF
$CATDEF
   Edit macros to generate the DEF ALIAS/NONVSAM statements while you're
   editing a list of data sets and/or data sets/alias names.  Look
   inside the exec for documentation. Issuing the macro name without
   any parm will also give you a quick help.

$CPU
   Display CPU usage in graphical format. Hitting Enter will refresh the
   screen, and move the cursor down to the next line. Historical CPU
   usage is kept in a rolling format (like spreadsheet rows) and it
   wraps around.  PF3 will get you out.  I wrote this many years ago
   when I was doing performance.  This is still usefull sometimes.

$IEASYS
   Display lots of pertinent system information along with how LOADxx
   drives IEASYMxx which then drives IEASYSxx and other Parmlib members
   when MVS comes up.  The thing that makes this different than others
   is, not only it displays the member suffixes (of appropriate Parm
   members), it also lists where they come from (based on the Parmlib
   concatenation).  See $SYSPRM below for the extention of this feature.
   At the bottom of the display is of course the list of system
   symbolics.

$MCOPY/$MDEL/$MREN
   Execs used as Line Command to invoke the ISPF Member COPY/DELETE/
   RENAME facilities. Instead of having to use the panel, you can just
   issue this as a single line command. In addition, invoking ISPF
   facility will ensure that the ENQ will get issued for the member
   names, which help to avoid Directory corruption if multiply users
   are updating the same PDS across several systems by using IEBCOPY.
   Of course, using the ISPF Panel to do the copy will also issue the
   ENQ as well.

$MEM
   With a list of data sets, you can find/browse/edit a specific member
   found in that data set concatenation. Cusror sensitive help is also
   available on the panel.  Useful to check for duplicate member and/or
   Parmlib member so you know exactly what parmlib member is being used.

$POINT
   Grabs a data set name (plus member) and displays a data set info
   screen which allows you to edit/browse/view, etc.. against that data
   set. If the data set is a loadlib, it will even tell you if it's
   APF'ed and/or Linklist'ed.  Set one of the non-frequently used PF
   key, like PF4, and say 'TSO %$POINT' then just cursor down to
   anywhere on screen and hit PF4.

$SYMSUB
   Edit Macro to substitue all system symbolics with their real values.
   Relies on an ASM REXX function called $RXSYMBL which is copied into
   VENDOR.ISPLLIB. This edit macro is also invoked by exec $SYSPRM.

   Note on this: The real source of $RXSYMBL right now is in this PDS.
   To install this somewhere, will need to assemble this program and
   put it in a IPSLLIB/STEPLIB, etc.. where it can be found through
   the load module search sequence.

$SYSINFO
   Colorful system information display. PF1 gives tutorial. If the LPAR
   has several CPs, the list of SN for them will be listed at the
   bottom, which you can also page down to see them all (up to 16).  A
   CPU Util graph is displayed which does get refreshed when you press
   Enter. Of course, PF3 will get you out.

$SYSPRM
   $IEASYS list the parmlib suffixes and where the parmlib members come
   from, based on how it was coded in IEASYSxx, i.e. CMD, ALLOC, PROG,
   OMVS, etc.. This exec will actually takes all those members, copies
   them altogether into a temp data set, resolved all system synmbolics
   if needed, and presents you with the data in ISPF edit mode.  Having
   said that, it does require an argument of XXXX where XXXX is PROG,
   OMVS, etc.. (as shown by $IEASYS). An additional character argument
   can also be provided after this XXXX (can be anything), which brings
   up a screen which allows you to fill in the VOLSER of the parmlibs
   instead of using what the current parmlibs are. This is good if
   you're working on building a new system, and having this exec go
   after the same members on a different volume.

   This exec will invoke the $SYMSUB edit macro at the end.

   Example;  $SYSPRM OMVS or $SYSPRM PROG x (x=any character)

