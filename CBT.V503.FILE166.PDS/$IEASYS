/* ------------------------ REXX ------------------------------ *
 *                                                              *
 * This exec displays IEASYSxx variables.  It also list out     *
 * the PARMLIB where these members came from.  Great for        *
 * diagnostics and chasing through what parm members got pulled *
 * based on IPL specfication.                                   *
 *                                                              *
 * Syntax - $IEASYS opt_parm (B=Browse - Default, V=View,       *
 *                            E=Edit)                           *
 *                                                              *
 * Chg - VNV - 11/10/04 -  Added the first time.                *
 *       VNV - 05/26/10 -  Added new fields for z/OS r1.11      *
 *       VNV - 09/20/12 -  Added display of IODF Dsname and     *
 *                         CPU Model.  Also check to see if     *
 *                         ISPF is run in batch, if so, then    *
 *                         displayed lines will be written to   *
 *                         SYSOUT (instead of being browse'd).  *
 *       VNV - 04/15/13 -  Added IP Addr.                       *
 *       VNV - 05/20/13 -  Added Active CSS and Current/IPL'ed  *
 *                         SSCHS (0 or 1 on GDPS LPARs)         *
 *       VNV - 03/07/14 -  Changed code to include z/OS 2.1     *
 *       VNV - 06/03/14 -  Changed Storage sizes to use comma-  *
 *                         formatted numbers                    *
 *       VNV - 10/03/14 -  Include IEASYS00 automatically for   *
 *                         "SYS".                               *
 *       VNV - 10/09/14 -  Add AUTOR, CATALOG, HZS, IXGCNF,     *
 *                         PAGESCM, WARNUND, GTZ, HZSPROC,      *
 *                         and fix IQP (does use member). Also  *
 *                         change ZZ to call ZAPZIP             *
 *       VNV - 07/31/15 -  Add totReal (coming from RIT)        *
 *       VNV - 08/19/15 -  Add DNSNAME to IPAddr                *
 *       VNV - 09/28/15 -  Add IODF creation date/time          *
 *       VNV - 03/23/16 -  Add SMFLIM and IEFOPZ (z/OS 2.2)     *
 *       VNV - 12/14/16 -  Changes to pull in the IPaddr for    *
 *                         ASPAC LPARs that don't use TCPIP as  *
 *                         Stc name.                            *
 *       VNV - 08/15/17 -  Add call to IWMQVS to get the        *
 *                         dynamic upgraded CEC                 *
 *       VNV - 10/26/17 -  Adding new parm for zOS 2.3, IZU,    *
 *                         RACF, FXE.                           *
 *       VNV - 09/24/18 -  Change to get the IP address as      *
 *                         resolved by Hostname (same as the    *
 *                         Hometest command).                   *
 *       VNV - 10/02/18 -  Add ICSF, ICSFPROC and OSPROTECT,    *
 *                         and SMFTBUFF).                       *
 *       VNV - 03/17/20 -  Add z14 ZR1 and z16 Hardware, plus   *
 *                         RUCSA and BOOST for z/OS 2.4         *
 * ------------------------------------------------------------ */

if sysvar(SYSISPF) Â¬='ACTIVE' then do
   parse source . . exec_Name .
   say exec_Name 'can only run under ISPF.'
   exit
   end

$version = "V06.00"

inDent   = 29                 /* indentation */
address ISPEXEC

arg viewMode .
select
   when viewMode = 'B' then viewCmd = 'BROWSE'
   when viewMode = 'V' then viewCmd = 'VIEW'
   when viewMode = 'E' then viewCmd = 'EDIT'
   otherwise do
      zedsmsg = 'View mode = BROWSE'
      zedlmsg = 'Invalid view mode - BROWSE assumed'.
      'SETMSG MSG(ISRZ001)'
      viewCmd = 'BROWSE'
      end
   end

numeric digits 256
cvt     = Get_Stor('10'x)
ecvt    = Get_Stor(cvt,'8C'x)

tempDd  = '$#$'||STRIP(TIME("S"))

x = outtrap("trap.","*")
address TSO
"FREE  F("tempDd")"
"ALLOC F("tempDd") SPACE(10 5) TRA DSORG(PS) LRECL(1330) RECF(F B)"
"MAKEBUF"
tempRc = rc
x= outtrap("off")
address ISPEXEC
"LMINIT DATAID(MYDD) DDNAME("tempDd")"

x = Get_IEASYS()
x = Get_All_Symbols()

address TSO
"EXECIO 0 DISKW" tempDd "(FINIS"
"DROPBUF"
address ISPEXEC

if SYSVAR("SYSENV") = "BACK" then do
   address TSO "EXECIO * DISKR" tempDd "(FINIS STEM outLine"
   do i = 1 to outLine0
      say STRIP(VALUE("outLine"||i),"T")
      end
   end
else do
   viewCmd "DATAID("myDd")"
   "LMFREE DATAID("myDd")"
   end

address TSO "FREE F("tempDd")"

exit



Get_IEASYS:

/* ------------------------------------------------------------ *
 * Get contents of IPA: IEASYS and other info used during IPL   *
 * ------------------------------------------------------------ */

ipa       = Get_Stor(ecvt,'188'x)
sysid     = STRIP(Get_Stor(cvt,'154'x,8))
ucbadd    = Get_Stor(cvt,'30'x)
ucbnum    = C2X(Get_Stor(ucbadd,'4'x,2))
ucbvol    = Get_Stor(ucbadd,'1c'x,6)
cvtpre    = D2C(C2D(cvt)-40)
cvtixavl  = Get_Stor(cvt,'7C'x)
iociovtp  = Get_Stor(cvtixavl,'D0'x)
cssId     = Get_Stor(cvtixavl,'113'x,1)
cda       = Get_Stor(iociovtp,'18'x)
iodfDsn   = STRIP(Get_Stor(cda,'20'x,44))
iodfDate  = STRIP(Get_Stor(cda,156,8))
iodfTime  = STRIP(Get_Stor(cda,164,8))
iodfDesc  = STRIP(Get_Stor(cda,172,16))
$shid     = Get_Stor(cvt,'42C'x,4)
$cpumdl   = Get_Stor($shid,'1A'x,6)"."Get_Stor($shid,'20'x,3)
gda       = Get_Stor(cvt,'230'x)
csd       = Get_Stor(cvt,'294'x)
rcvt      = Get_Stor(cvt,'3E0'x)
pccavt    = Get_Stor(cvt,'2FC'x)
SMCAADD   = Get_Stor(cvt,'C4'x)

gdpsIni   = Get_Stor(iociovtp,'10B'x,1)
gdpsAct   = C2D(Get_Stor(iociovtp,'170'x,1))

if gdpsIni = '00'x then do      /* not config with alternate schset */
   gdpsAct = " "
   gdpsIni = " "                /* No channel set used */
   gdpsSwp = " "                /* Of course no-swap   */
   end
else do
   if gdpsIni = gdpsAct then do      /* otherwise check for swap    */
      gdpsSwp = "N"
      end
   else do
      gdpsSwp = "Y"
      end
   end

if gdpsAct > 1 then do
   gdpsAct = " "     /* APAR OA32339 not applied */
   gdpsSwp = " "
   end

$opsys    = MVSVAR('SYSOPSYS')
$jeslvl   = SYSVAR('SYSJES')
$jesnode  = SYSVAR('SYSNODE')

parse var $opsys . $ovv '.' $rel '.' .

if $rel > 10 | $ovv > 1 then $mvs1_11 = 1
else $mvs1_11 = 0

$mvsrel = $ovv||$rel

getInit    = SOCKET('INITIALIZE','TCPINFO',1)
parse var getInit INIT_RC getSubTaskid getMaxDesc getService
if INIT_RC = 1004 then do
   tsab    = Get_Stor(ecvt,176)
   tsablen = C2D(Get_Stor(tsab,4,2))
   tsebnum = (tsablen-64)/128
   do i=1 to tsebnum
      tseb    = D2C(C2D(tsab)+64+(i-1)*128)
      if Get_Stor(tseb) <> "TSEB" then leave
      tcpasid = Get_Stor(tseb,56,2)
      if C2X(tcpasid) <> 0 then do
         stcName = Get_Stor(tseb,16,8)
         getInit = SOCKET('INITIALIZE','TCPINFO',1,stcName)
         parse var getInit INIT_RC getSubTaskid getMaxDesc getService
         if INIT_RC = 0 then leave
         end
      end
   end

if INIT_RC =  0 then do
   getHostid = SOCKET('GETHOSTID')
   getHostNm = SOCKET('GETHOSTNAME')
   getDomain = SOCKET('GETDOMAINNAME')
   parse var getHostid tcpRc tcpAddr
   parse var getHostNm tcpRc tcpName
   parse var getDomain tcpRc tcpDomain
   $fullDns  = STRIP(tcpName'.'tcpDomain)
   getNewIP  = SOCKET('GETHOSTBYNAME',$fullDns)
   parse var getNewIP  tcpRc $pingAdd
   if WORD($pingAdd,1) = "EHOSTNOTFOUND" then $pingAdd = tcpAddr
   getTerm   = SOCKET('TERMINATE')
   $pingAdd = $pingAdd "-" $fullDns "(static:" tcpAddr")"
   end
else do
   $fullDns = ""
   $pingAdd = ""
   end

/* --- Call IWMQVS  ------------------------------------------------- */

QVS_totL   = 512
QVS_len    = D2X(QVS_totL)
QVS_len    = RIGHT(X2C(QVS_len),4,D2C(0))
QVS_Out    = QVS_len||COPIES('00'X,QVS_totL-4)

address linkpgm 'IWMQVS QVS_Out'

If rc = 0 then do
   cec_type   = SUBSTR(QVS_Out,9,4)
   cec_model  = STRIP(SUBSTR(QVS_Out,13,16))
   select
      when cec_type = '2064' then cec_desc = '    z Series 900'
      when cec_type = '2066' then cec_desc = '    z Series 800'
      when cec_type = '2084' then cec_desc = '    z Series 990'
      when cec_type = '2086' then cec_desc = '    z Series 890'
      when cec_type = '2094' then cec_desc = '    System z9 EC'
      when cec_type = '2096' then cec_desc = '    System z9 BC'
      when cec_type = '2097' then cec_desc = '   System z10 EC'
      when cec_type = '2098' then cec_desc = '   System z10 BC'
      when cec_type = '2817' then cec_desc = ' zEnterprise 196'
      when cec_type = '2818' then cec_desc = ' zEnterprise 114'
      when cec_type = '2827' then cec_desc = 'zEnterprise EC12'
      when cec_type = '2828' then cec_desc = 'zEnterprise BC12'
      when cec_type = '2964' then cec_desc = '    z System z13'
      when cec_type = '2965' then cec_desc = '   z System z13s'
      when cec_type = '3906' then cec_desc = '    z System z14'
      when cec_type = '3907' then cec_desc = 'z System z14 ZR1'
      when cec_type = '8561' then cec_desc = '    z System z15'
      otherwise                   cec_desc = ' Unkwn CPU model'
      end
   if SUBSTR($cpumdl,8,3) <> cec_model then do
      $cpumdl = $cpumdl"("cec_model")"
      end
   $cpumdl    = $cpumdl "-" STRIP(cec_desc)
   end

IPLTI  = C2D(Get_Stor(SMCAADD,'150'x))%360000
IPLTRM = C2D(Get_Stor(SMCAADD,'150'x))//360000
IPLTD  = RIGHT(IPLTRM%6000,2,'0')             /* Find # of Minutes  */

IPLT   = IPLTI||'.'||IPLTD
IPLD   = C2X(Get_Stor(SMCAADD,'154'x))

IPLYEAR  = substr(IPLD,3,2)
IPLDAY   = substr(IPLD,5,3)

if substr(IPLD,1,2) = '00' then IPLYEAR = IPLYEAR+1900
else IPLYEAR = IPLYEAR+2000

IPL_R   = $DATE('J2R',IPLYEAR||IPLDAY)
TODAY_J = $DATE('G2J',,
          substr(DATE(S),5,2)||'/'||,
          substr(DATE(S),7,2)||'/'||substr(DATE(S),1,4))
TODAY_R = $DATE('J2R',TODAY_J)

if TODAY_R = IPL_R then AGOS = '(Today)'
   else if (TODAY_R - IPL_R) = 1 then AGOS = '(Yesterday)'
      else AGOS = '('||Value((TODAY_R - IPL_R))||' days ago)'

iText =  Format(IPLT,2,2) AGOS,
         'on' $DATE('R2D',IPL_R)||',' IPLYEAR||'.'||IPLDAY,
         '('||$DATE('J2G',IPLYEAR||IPLDAY)||')'

x=W()
t=("** Listing of IPA & IEASYSxx variables on" DATE(U)||"-"TIME() "**")
x=W($version CENTER(t,72))
x=W()
t='** On' sysid 'IPLed from' ucbvol '('ucbnum') **'
x=W(CENTER(t,80))
t='** Opsys:' $opsys ' JES2node:' $jesnode ' JES2lvl:' $jeslvl '**'
x=W(CENTER(t,80))
x=W()

x=W("** Active_CSS   =" C2X(cssId))
x=W("** ArchLevel    =" STRIP(Get_Stor(ipa,'85F'x,1)))
x=W("** CPU_Model    =" STRIP($cpumdl))
x=W("** EDT_Id       =" STRIP(Get_Stor(ipa,'75'x,2)))
x=W("** HW_Name      =" STRIP(Get_Stor(ipa,'18'x,8)))

ieaSymList = STRIP(Get_Stor(ipa,'120'x,63))
x=W("** IEASYM_Suff  =" ieaSymList)

x=W("** IEASYS_Suff  =" STRIP(Get_Stor(ipa,'A0'x,63)))
x=W("** IODF_Hlq     =" STRIP(Get_Stor(ipa,'63'x,8)))
x=W("** IODF_Suff    =" STRIP(Get_Stor(ipa,'60'x,2)))
x=W("** IODF_Dsname  =" STRIP(iodfDsn))
x=W("** IODF_Created =" STRIP(iodfTime) "on" STRIP(iodfDate) "-" ,
                      "Description: '"STRIP(iodfDesc)"'")
x=W("** IPL_Time     =" STRIP(iText))
x=W("** Host_IP_Addr =" STRIP($pingAdd))
x=W("** LoadParm     =" STRIP(Get_Stor(ipa,'10'x,8)))
x=W("** LoadParm_DSN =" STRIP(Get_Stor(ipa,'30'x,44)))
x=W("** Lpar_Name    =" STRIP(Get_Stor(ipa,'20'x,8)))
x=W("** Mstrcat_Dsn  =" STRIP(Get_Stor(ipa,'EA'x,44)))
x=W("** Mstrcat_Vol  =" STRIP(Get_Stor(ipa,'E0'x,6)))
x=W("** Nucleus_Id   =" STRIP(Get_Stor(ipa,'17'x,1)))

onlineStor = Get_Stor(cvt,'358'x)

pvt     = Get_Stor(cvt,356)
rit     = Get_Stor(pvt,4)
totReal = Get_Stor(rit,296,8)

onlCp   = C2D(Get_Stor(csd,212,4))

totalCp = 0
zaapCp  = 0
ziipCp  = 0
nextCp  = D2C(C2D(pccavt)-4)
do until totalCp = onlCp
   nextCp = D2C(C2D(nextCp)+4)
   pcca   = Get_Stor(nextCp)
   if C2D(pcca) = 0 then iterate
   pccaSer  = Get_Stor(pcca,4,12)
   pccaId   = Get_Stor(pcca,16,2)
   pccaAttr = Get_Stor(pcca,376,1)
   if BITAND(pccaAttr,'01'x) = '01'x then zaapCp = zaapCp + 1
   if BITAND(pccaAttr,'04'x) = '04'x then ziipCp = ziipCp + 1
   totalCp = totalCp + 1
   end

x=W("** Onlne_cp     =" STRIP(onlCp))
x=W("** Onlne_ZAAPcp =" STRIP(zaapCp))
x=W("** Onlne_ZIIPcp =" STRIP(ziipCp))

tempText = STRIP(FormatNumber(C2D(onlineStor)/1024)||'M')
totReal  = STRIP(FormatNumber(C2D(totReal)/(1024*1024))||'M')
x=W("** Onlne_Stor   =" tempText "("totReal")")

secDsn   = Get_Stor(rcvt,56,44)
secType  = Get_Stor(rcvt,,4)

select
   when secType = 'RCVT' then secSoft = 'RACF'
   when secType = 'RTSS' then secSoft = 'TopSecret'
   otherwise secSoft = sectype
   end

x=W("** SCHS_Active  =" gdpsAct)
x=W("** SCHS_Init    =" gdpsIni)
x=W("** Security     =" secSoft)
x=W("** Security_Db  =" secDsn)

csasize  = FormatNumber((C2D(Get_Stor(gda,'70'x))%1024))||'K'
csaesize = FormatNumber((C2D(Get_Stor(gda,'80'x))%1024))||'K'
sqasize  = FormatNumber((C2D(Get_Stor(gda,'94'x))%1024))||'K'
sqaesize = FormatNumber((C2D(Get_Stor(gda,'9C'x))%1024))||'K'
prvsize  = FormatNumber((C2D(Get_Stor(gda,'A4'x))%1024))||'K'
prvesize = FormatNumber((C2D(Get_Stor(gda,'AC'x))%1024))||'K'

x=W('** Stor_CSA     =' RIGHT(csasize,10))
x=W('** Stor_CSA_E   =' RIGHT(csaesize,10))
x=W('** Stor_SQA     =' RIGHT(sqasize,10))
x=W('** Stor_SQA_E   =' RIGHT(sqaesize,10))
x=W('** Stor_PRV     =' RIGHT(prvsize,10))
x=W('** Stor_PRV_E   =' RIGHT(prvesize,10))

x=W('** Sysplex_Name =' Get_Stor(ecvt,'8'x,8))

x=W("** VM_Userid    =" STRIP(Get_Stor(ipa,'28'x,8)))
x=W("** Parmlibs     =")

parmNum.   = ""
ct         = 0

parmLibNum = C2D(Get_Stor(ipa,'856'x,2))
libOff     = 416
do parmLibNum
   if BITAND(Get_Stor(ipa,libOff+63,1),'80'x) = '80'x then do
      x=W(COPIES(' ',17) Get_Stor(ipa,libOff,44),
                         Get_Stor(ipa,libOff+45,6))
      ct = ct + 1
      parmNum.ct = "parmDD"||RIGHT(ct,2,0)      ,
                 STRIP(Get_Stor(ipa,libOff,44)) ,
                 STRIP(Get_Stor(ipa,libOff+45,6))
      end
   libOff  = libOff + 64
   end
x=W()

/* ------------------------------------------------------------ *
 * Found all PARMLIB as coming off the IPL.  Now allocate them  *
 * all so they can be used later using LIMINIT ISPF service.    *
 * ------------------------------------------------------------ */

address ISPEXEC
do i=1 to ct
   t_dd  = WORD(parmNum.i,1)
   t_dsn = WORD(parmNum.i,2)
   t_vol = WORD(parmNum.i,3)
   "LMINIT DATAID("||t_dd||") DATASET('"||t_dsn||"') "||,
           "VOLUME("||t_vol||")"
   "LMOPEN DATAID("VALUE(t_dd)")"
   parmNum.i = VALUE(t_dd) t_dsn t_vol
   end
address TSO

/* ------------------------------------------------------------ *
 * Process IEASYM list first.                                   *
 * ------------------------------------------------------------ */

x=W(COPIES(' ',5) '* IEASYM   * SYM      =' ieaSymList)
if SUBSTR(ieaSymList,1,1) = '(' then do
   parse var ieaSymList '(' ieaSymList ')' .
   end
ieaSymList = TRANSLATE(ieaSymList,' ',',')
if WORDS(ieaSymList) > 0 then do
   do j=1 to WORDS(ieaSymList)
      if LENGTH(WORD(ieaSymList,j)) = 2 then do
         indivParmMem = "IEASYM"||WORD(ieaSymList,j)
         indivLib     = Obtain_Parm(indivParmMem)
         x=W(COPIES(' ',inDent) indivLib'('indivParmMem')')
         end
      end                  /* do j=1     */
   end                     /* if WORDS   */


count = 1
varNum = 0

x = Get_PDE_Data('SYS','A80'x,'IEASYS')
x = Get_PDE_Data('ALLOC','868'x,'ALLOC')
x = Get_PDE_Data('APF','870'x,'IEAAPF')
x = Get_PDE_Data('APG','878'x)
if $mvsrel > 0112 then x = Get_PDE_Data('AUTOR','B40'x,'AUTOR')
if $mvs1_11 then  x = Get_PDE_Data('AXR','B18'x,'AXR')
x = Get_PDE_Data('BLDL','880'x)
x = Get_PDE_Data('BLDLF','888'x)
if $mvsrel > 0203 then x = Get_PDE_Data('BOOST','BD8'x)
if $mvsrel > 0112 then x = Get_PDE_Data('CATALOG','B48'x,'IGGCAT')
if $mvs1_11 then  x = Get_PDE_Data('CEA','B08'x,'CEAPRM')
x = Get_PDE_Data('CEE','AF0'x,'CEEPRM')
x = Get_PDE_Data('CLOCK','890'x,'CLOCK')
x = Get_PDE_Data('CLPA','898'x)
x = Get_PDE_Data('CMB','8A0'x)
x = Get_PDE_Data('CMD','8A8'x,'COMMND')
x = Get_PDE_Data('CON','8B0'x,'CONSOL')
x = Get_PDE_Data('CONT','8B8'x)
x = Get_PDE_Data('COUPLE','8C0'x,'COUPLE')
if $mvs1_11 then  x = Get_PDE_Data('CPCR','B30'x)
x = Get_PDE_Data('CPQE','8C8'x)
x = Get_PDE_Data('CSA','8D0'x)
x = Get_PDE_Data('CSCBLOC','8D8'x)
x = Get_PDE_Data('CVIO','8E0'x)
if $mvs1_11 then  x = Get_PDE_Data('DDM','B38'x)
x = Get_PDE_Data('DEVSUP','8E8'x,'DEVSUP')
x = Get_PDE_Data('DIAG','8F0'x,'DIAG')
x = Get_PDE_Data('DRMODE','AE8'x)
x = Get_PDE_Data('DUMP','8F8'x)
x = Get_PDE_Data('DUPLEX','900'x)
x = Get_PDE_Data('EXIT','908'x,'EXIT')
x = Get_PDE_Data('FIX','910'x,'IEAFIX')
if $mvsrel > 0202 then x = Get_PDE_Data('FXE','B98'x,'FXEPRM')
x = Get_PDE_Data('GRS','918'x)
x = Get_PDE_Data('GRSCNF','920'x,'GRSCNF')
x = Get_PDE_Data('GRSRNL','928'x,'GRSRNL')
if $mvsrel > 0113 then x = Get_PDE_Data('GTZ','B70'x,'GTZPRM')
if $mvs1_11 then  x = Get_PDE_Data('HVCOMM','B10'x)
x = Get_PDE_Data('HVSHARE','AD8'x)
if $mvsrel > 0113 then x = Get_PDE_Data('HZS','B68'x,'HZSPRM')
if $mvsrel > 0113 then x = Get_PDE_Data('HZSPROC','B78'x)
x = Get_PDE_Data('ICS','930'x,'IEAICS')
if $mvsrel > 0201 then x = Get_PDE_Data('IEFOPZ','B88'x)
x = Get_PDE_Data('IKJTSO','AC0'x,'IKJTSO')
x = Get_PDE_Data('ILMLIB','AB0'x)
x = Get_PDE_Data('ILMMODE','AB8'x)
x = Get_PDE_Data('IOS','938'x,'IECIOS')
x = Get_PDE_Data('IPS','940'x,'IEAIPS')
if $mvsrel > 0202 then x = Get_PDE_Data('ICSF','BC0'x)
if $mvsrel > 0202 then x = Get_PDE_Data('ICSFPROC','BC8'x)
if $mvsrel > 0113 then x = Get_PDE_Data('IQP','B28'x,'IQPPRM')
if $mvsrel > 0112 then x = Get_PDE_Data('IXGCNF','B50'x,'IXGCNF')
if $mvsrel > 0202 then x = Get_PDE_Data('IZU','BA0'x,'IZUPRM')
if $mvs1_11 then  x = Get_PDE_Data('LFAREA','B00'x)
x = Get_PDE_Data('LICENSE','AC8'x)
x = Get_PDE_Data('LNK','948'x,'LNKLST')
x = Get_PDE_Data('LNKAUTH','950'x)
x = Get_PDE_Data('LOGCLS','958'x)
x = Get_PDE_Data('LOGLMT','960'x)
x = Get_PDE_Data('LOGREC','968'x)
x = Get_PDE_Data('LPA','970'x,'LPALST')
x = Get_PDE_Data('MAXCAD','978'x)
x = Get_PDE_Data('MAXUSER','980'x)
x = Get_PDE_Data('MLPA','988'x,'IEALPA')
x = Get_PDE_Data('MSTRJCL','990'x,'MSTJCL')
x = Get_PDE_Data('NONVIO','998'x)
x = Get_PDE_Data('NSYSLX','9A0'x)
x = Get_PDE_Data('NUCMAP','9A8'x)
x = Get_PDE_Data('OMVS','9B0'x,'BPXPRM')
x = Get_PDE_Data('OPI','9B8'x)
x = Get_PDE_Data('OPT','9C0'x,'IEAOPT')
if $mvsrel > 0202 then x = Get_PDE_Data('OSPROT','BB8'x)
x = Get_PDE_Data('PAGE','9D0'x)
if $mvsrel > 0113 then x = Get_PDE_Data('PAGESCM','B58'x)
x = Get_PDE_Data('PAGNUM','9D8'x)
x = Get_PDE_Data('PAGTOTL','9E0'x)
x = Get_PDE_Data('PAK','9E8'x,'IEAPAK')
x = Get_PDE_Data('PLEXCFG','9F0'x)
x = Get_PDE_Data('PRESCPU','AF8'x)
x = Get_PDE_Data('PROD','9F8'x,'IFAPRD')
x = Get_PDE_Data('PROG','A00'x,'PROG')
x = Get_PDE_Data('PURGE','A08'x)
if $mvsrel > 0202 then x = Get_PDE_Data('RACF','B90'x,'IRRPRM')
x = Get_PDE_Data('RDE','A10'x)
x = Get_PDE_Data('REAL','A18'x)
x = Get_PDE_Data('RER','A20'x)
x = Get_PDE_Data('RSU','A28'x)
x = Get_PDE_Data('RSVNONR','A30'x)
x = Get_PDE_Data('RSVSTRT','A38'x)
x = Get_PDE_Data('RTLS','AA0'x,'CSVRTL')
if $mvsrel > 0203 then x = Get_PDE_Data('RUCSA','BD0'x)
x = Get_PDE_Data('SCH','A40'x,'SCHED')
x = Get_PDE_Data('SMF','A48'x,'SMFPRM')
if $mvsrel > 0202 then x = Get_PDE_Data('SMFTBUFF','BA8'x)
if $mvsrel > 0201 then x = Get_PDE_Data('SMFLIM','B80'x)
x = Get_PDE_Data('SMS','A50'x,'IGDSMS')
x = Get_PDE_Data('SQA','A58'x)
x = Get_PDE_Data('SSN','A60'x,'IEFSSN')
x = Get_PDE_Data('SVC','A68'x,'IEASVC')
x = Get_PDE_Data('SWAP','A70'x)
x = Get_PDE_Data('SYSNAME','A78'x)
x = Get_PDE_Data('UNI','AA8'x,'CUNUNI')
x = Get_PDE_Data('VAL','A88'x,'VATLST')
x = Get_PDE_Data('VIODSN','A90'x)
x = Get_PDE_Data('VRREGN','A98'x)
if $mvsrel > 0112 then x = Get_PDE_Data('WARNUND','B60'x)
if $mvs1_11 then  x = Get_PDE_Data('ZAPZIP','B20'x)



ipadata.0 = count

address ISPEXEC
do i=1 to ct
   t_dd  = WORD(parmNum.i,1)
   "LMCLOSE DATAID("t_dd")"
   "LMFREE  DATAID("t_dd")"
   end
address TSO

return 0

/* ------------------------------------------------------------ *
 * Routine to parse through the IEASYSxx parm to pick up        *
 * the specified parm.  Anything with two-chacracter long       *
 * is really a suffix that points to a member in the PARMLIB    *
 * concatenation.                                               *
 * ------------------------------------------------------------ */

Get_PDE_Data:

parse arg parmName,parmOff,parmMem

parmName   = LEFT(parmName,8)
count      = count + 1
myPde      = Get_Stor(ipa,parmOff)
tempOffset = C2D(parmOff)+4
pdeLeng    = C2D(Get_Stor(ipa,tempOffset,2))
if pdeLeng > 1024 then pdeLeng = 1024
tempOffset = C2D(parmOff)+6
origin     = Get_Stor(ipa,tempOffset,2)

select
   when origin = '0000'x then do
      parmSupplied = 0
      pdeSource = '*' '( dflt )' '*'
      end
   when origin = 'FFFF'x then do
      parmSupplied = 0
      pdeSource = '*' '( oper )' '*'
      end
   otherwise do
      parmSupplied = 1
      syspParm  = "IEASYS"origin
      fromParm  =  Obtain_Parm(syspParm)
      pdeSource = '*' 'IEASYS'origin '*'
      end
   end

if C2D(myPde) <> 0 then do
   pdeText = Get_Stor(myPde,,pdeLeng)
   end
else do
   pdeText = ''
   end

ipaData.count = parmName "=" pdeText

varNum = varNum + 1
x=W()
x=W(RIGHT(varNum,4)'.' pdeSource ipaData.count)
if parmSupplied then do
   x=W(COPIES(' ',inDent) COPIES('=',54))
   x=W(COPIES(' ',inDent) fromParm'('syspParm')    ** IEASYS **')
   x=W(COPIES(' ',inDent) COPIES('=',54))
   end

/* ------------------------------------------------------------ *
 * For any suffix list, pick out the suffixes and try to        *
 * figure out where these members came from using the PARMLIB   *
 * concatenation.                                               *
 * ------------------------------------------------------------ */

if parmMem <> "" then do
   if SUBSTR(pdeText,1,1) = '(' then do
      parse var pdeText '(' pdeText ')' .
      end

   /* ------------------------------------------------------------ *
    * IEASYS00 is always included no matter what                   *
    * ------------------------------------------------------------ */

   if parmName = "SYS" then pdeText = "00" pdeText

   pdeText = TRANSLATE(pdeText,' ',',')
   if WORDS(pdeText) > 0 then do
      do j=1 to WORDS(pdeText)
         if LENGTH(WORD(pdeText,j)) = 2 then do
            indivParmMem = parmMem||WORD(pdeText,j)
            indivLib     = Obtain_Parm(indivParmMem)
            if indivParmMem = "IEASYS00" then flg = "      ** Dflt **"
            else flg = ""
            x=W(COPIES(' ',inDent) indivLib'('indivParmMem')' flg)
            end
         end                  /* do j=1     */
      end                     /* if WORDS   */
   end                        /* if parmMem */
return 0


/* ------------------------------------------------------------ *
 * Collects all Static Symbols.                                 *
 * ------------------------------------------------------------ */

Get_All_Symbols:
symTable  = Get_Stor(ecvt,'128'x)
numSym    = C2D(Get_Stor(symTable,2,2))
symAddr   = D2C(C2D(symTable)+4)
symBols.  = ''

symBols.0 = numSym

do i=1 to numSym
   t = (i-1)*16
   nextSym  = D2C(C2D(symAddr)+t)
   s_off    = C2D(Get_Stor(nextSym,0,4))
   s_leng   = C2D(Get_Stor(nextSym,4,4))
   v_off    = C2D(Get_Stor(nextSym,8,4))
   v_leng   = C2D(Get_Stor(nextSym,12,4))
   mySym    = LEFT(STRIP(Get_Stor(symAddr,s_off,s_leng)),10)
   if v_leng > 0 then do
      symBols.i =  mySym "=" Get_Stor(symAddr,v_off,v_leng)
      end
   else do
      symBols.i =  mySym "= (blank)"
      end
   end

x=W()
x=W("** Listing of SYMBOLICS **")
x=W()

do k=1 to symBols.0
   x=W(RIGHT(k,4)'.' symBols.k)
   end

x=W()

return 0

Obtain_Parm:
arg myInput

foundIt = 0

address ISPEXEC
do i=1 to ct
   t_dd  = WORD(parmNum.i,1)
   "LMMFIND DATAID("t_dd") MEMBER("myInput")"
   select
      when rc=0 then do
         foundIt = 1
         leave
         end
      when rc=8 then nop
      otherwise do
         x=W('Error doing LMMFIND on' WORD(parmNum.i,2))
         leave
         end
      end
   end
address TSO
if foundIt then
   return WORD(parmNum.i,2)
else
   return '** Member not found ** '

W: procedure expose tempDd

parse arg outPutLine
queue outPutLine
address TSO "EXECIO 1 DISKW" tempDd

return 0


/* ------------------------------------------------------------ *
 * This procedure format a number with ','.                     *
 * ------------------------------------------------------------ */

FormatNumber: procedure
   parse value arg(1) with whole "." decs

   formattedNumber = STRIP(REVERSE(TRANSLATE( "abc,def,ghi,jkl,mno",,
                                   REVERSE(whole),,
                                   "abcdefghijklmno",",")),"L",",")

  if decs <> "" then
     formattedNumber = formattedNumber || "." || decs
return formattedNumber


/*------------------------------------------------------------------*/
/*                                                                  */
/*      This procedure will extract data using the MVS Storage      */
/*      function. Input arguments will be:                          */
/*                                                                  */
/*      1) Storage_Pointer or Literal, i.e. cvtPTR or '10'x, or     */
/*         16 (like '10'x)                                          */
/*      2) offSet in hex or dec (numnbe), i.e. 'FF'x or 256 or      */
/*         D2C(256)                                                 */
/*      3) length of returned data in decimal, i.e. 256             */
/*                                                                  */
/*      NOTE - To make sure that this procedure will work all the   */
/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */
/*      of the calling REXX exec.                                   */
/*                                                                  */
/*------------------------------------------------------------------*/

Get_Stor: procedure

parse arg area,offSet,leng

if ARG(2,'O') then offSet=0

if ARG(3,'O') then leng=4

if DATATYPE(area) = 'CHAR' then do
   area =  C2D(area)
   End

if DATATYPE(offSet) = 'CHAR' then do
   offSet =  C2D(offSet)
   End

return  STORAGE((D2X(area+offSet)),leng)


/*------------------------------------------------------------------*/
/*                                                                  */
/*      This REXX exec will do date conversion:                     */
/*                                                                  */
/*      call Format:  DATE = $DATE(CODE,INPUT)                      */
/*                                                                  */
/*          CODE = 'J2G' - Julian to Gregorian date                 */
/*          CODE = 'G2J' - Gregorian date to Julian                 */
/*          CODE = 'J2R' - Julian to Relative date                  */
/*          CODE = 'R2J' - Relative to Julian date                  */
/*          CODE = 'R2D' - Relative to day, i.e Sun, Mon, etc..     */
/*                                                                  */
/*          INPUT = either 'mm/dd/YYYY' or 'YYYYDDD' or 'nnnn'      */
/*                                                                  */
/*      Errors during processing will return 0 as result and        */
/*      an error message will be displayed as well.                 */
/*                                                                  */
/*------------------------------------------------------------------*/

$DATE: procedure

parse Upper arg func,date

if date = '' then retDate = 0
else select
      when func = 'J2G' then retDate = J2G_PROC(date)
      when func = 'G2J' then retDate = G2J_PROC(date)
      when func = 'J2R' then retDate = J2R_PROC(date)
      when func = 'R2J' then retDate = R2J_PROC(date)
      when func = 'R2D' then retDate = R2D_PROC(date)
      otherwise do
         say 'DT999E - Invalid function code as' func
         retDate = 0
         end
   end

return retDate



J2G_PROC: procedure

parse arg julDate

call VALIDATE_JULIAN
if RESULT = 0 then gDate = 0
else do
   julianYYYY  = SUBSTR(julDate,1,4)
   julianDDD   = SUBSTR(julDate,5,3)
   mo.1  = 31
   mo.2  = 28
   mo.3  = 31
   mo.4  = 30
   mo.5  = 31
   mo.6  = 30
   mo.7  = 31
   mo.8  = 31
   mo.9  = 30
   mo.10 = 31
   mo.11 = 30
   mo.12 = 31
   if LEAP_YEAR(julianYYYY) then mo.2 = 29
   do I=1 to 12 while julianDDD > mo.I
      julianDDD = julianDDD - mo.I
      end
   mm   = RIGHT(I,2,'0')
   dd   = RIGHT(julianDDD,2,'0')
   gDate = mm||'/'||dd||'/'||julianYYYY
   end

return gDate


G2J_PROC: procedure

parse arg gregDate
parse var gregDate mm '/' dd '/' YYYY
J_DATE = 0

if DATATYPE(mm)   Â¬= 'NUM' | ,
   DATATYPE(dd)   Â¬= 'NUM' | ,
   DATATYPE(YYYY) Â¬= 'NUM' | ,
   dd > 31                 | ,
   mm < 1                  | ,
   mm > 12                 | ,
   YYYY > 9999          then ,
      say 'DT001E - Invalid Gregorian date as' gregDate
else do
   mo.1  = 31
   mo.2  = 28
   mo.3  = 31
   mo.4  = 30
   mo.5  = 31
   mo.6  = 30
   mo.7  = 31
   mo.8  = 31
   mo.9  = 30
   mo.10 = 31
   mo.11 = 30
   mo.12 = 31
   if LEAP_YEAR(YYYY) then mo.2 = 29
   mm = STRIP(mm,'L','0')
   if (dd > VALUE(mo.mm)) then ,
       say 'DT002E - Out-of-range date as' gregDate
   else do
      jAccumDay = 0
      if mm > 1 then do I=1 to (mm-1)
         jAccumDay = jAccumDay + mo.I
         end
      jAccumDay = jAccumDay + dd
      J_DATE      = YYYY||RIGHT(jAccumDay,3,'0')
      end
   end

return J_DATE




J2R_PROC: procedure

parse arg julDate

call VALIDATE_JULIAN
if RESULT = 1 then relDate = ((julianYYYY-1) * 365) + ,
                            ((julianYYYY-1) % 4) - ,
                            ((julianYYYY-1) % 100) + ,
                            ((julianYYYY-1) % 400) + (julianDDD)
   else relDate = 0
return relDate



R2J_PROC: procedure
parse arg REL_DATE
RETURNED_J = 0

if DATATYPE(REL_DATE) Â¬= 'NUM' then ,
   say 'DT006E - Relative date non-numeric as' REL_DATE
else do
   if REL_DATE > 3652424 then ,
      say 'DT007E - Relative date out-of-range as' REL_DATE
   else do
      temp_YYYY = (REL_DATE % 366) + 1
      temp_REL = J2R_PROC(RIGHT(temp_YYYY,4,'0')||'000')
      do while (REL_DATE - temp_REL) > 0
         if LEAP_YEAR(temp_YYYY) then LEFT_OVER = 366
         else LEFT_OVER = 365
         if LEFT_OVER < (REL_DATE - temp_REL) then do
            temp_REL  = temp_REL  + LEFT_OVER
            temp_YYYY = temp_YYYY + 1
            end
         else do
            temp_DDD = (REL_DATE - temp_REL)
            leave
            end
         end
      RETURNED_J =  RIGHT(temp_YYYY,4,'0')||RIGHT(temp_DDD,3,'0')
   end
end

return RETURNED_J


R2D_PROC: procedure
parse arg REL_DATE
RETURNED_DAY = 0
if DATATYPE(REL_DATE) Â¬= 'NUM' then ,
   say 'DT006E - Relative date non-numeric as' REL_DATE
else do
   if REL_DATE > 3652424 then ,
      say 'DT007E - Relative date out-of-range as' REL_DATE
   else do
      DAY_INDEX = (REL_DATE // 7)+1
      RETURNED_DAY  = WORD('Sun Mon Tue Wed Thu Fri Sat',DAY_INDEX)
   end
end

return RETURNED_DAY





VALIDATE_JULIAN:

VALID_DATE = 0

if LENGTH(julDate) Â¬=7 | DATATYPE(julDate) Â¬= 'NUM' then
   say 'DT003E - Date too short/long or non-numeric as' julDate
else do
   julianYYYY = SUBSTR(julDate,1,4)
   julianDDD   = SUBSTR(julDate,5,3)
   if (julianDDD > 366) then ,
      say 'DT004E - Number of day > 366 as' julianDDD
   else if (LEAP_YEAR(julianYYYY) = 0) & (julianDDD = 366) then ,
          say 'DT005E - Invalid days for a non-leap year as' julianYYYY
        else if (julianYYYY < 1) then ,
           say 'DT008E - Invalid year as' julianYYYY
           else VALID_DATE = 1
   end
return VALID_DATE



LEAP_YEAR: procedure
parse arg YEAR_CHECKED

if (YEAR_CHECKED // 100) = 0 then ,
   if (YEAR_CHECKED // 400) = 0 then LEAP_YEAR_FLAG = 1
   else LEAP_YEAR_FLAG = 0
else if (YEAR_CHECKED // 4) = 0 then LEAP_YEAR_FLAG = 1
   else LEAP_YEAR_FLAG = 0

return LEAP_YEAR_FLAG



