$RXSYMBL CSECT
$RXSYMBL RMODE ANY
$RXSYMBL AMODE 31
*
* ------------------------------------------------------------ *
*        AUTHOR - VINH VU                                      *
*        DATE WRITTEN - 11/14/05                               *
*                                                              *
*        REGISTER USAGE                                        *
*                                                              *
*              R0  - WORK                                      *
*              R1  - WORK                                      *
*              R2  - WORK                                      *
*              R3  - ADDRESS OF ARG                            *
*              R4  - LENG OF ARG                               *
*              R5  - ARGTABLE_ENTRY                            *
*              R6  -                                           *
*              R7  -                                           *
*              R8  -                                           *
*              R9  - USED AS RC                                *
*              R10 -                                           *
*              R11 - EVALBLOCK                                 *
*              R12 - BASE REG                                  *
*              R13 -                                           *
*              R14 - TEMP                                      *
*              R15 - TEMP                                      *
*                                                              *
*        PURPOSE - TO INVOKE THE ASASYMBP TO RESOLVE AND SUBS  *
*                 ALL SYSTEM SYMBOLICS IN THE INPUT STRING     *
*                 AND RETURN THE OUTPUT.                       *
*                                                              *
*        THIS IS A REXX ROUTINE THAT WILL RESOLVE/SUBSTITUTE   *
*        THE SYMBOLICS FROM THE INPUT CHARACTER STRING, E.G.   *
*                                                              *
*        NEW_STRING = $RXSYMBL('&SYSPLEX..&B1..TESTNAME')      *
*                                                              *
*        NEW_STRING -> PLEX41.G0.TESTNAME                      *
*                                                              *
* ------------------------------------------------------------ *
*
* ------ IN-LINE MACROS BEGINNING ---------------------------- *
*                                                              *
         MACRO
         SET   &BASE,&LV=,&DSECT=,&REG=
.*
.*--------------------------------------------------------------------
.*
.*       MACRO = SET
.*
.*       AUTHOR = VINH VU
.*
.*       DATE-WRITTEN = 08/31/81
.*
.*       PURPOSE = TO SET UP BASE REGS FOR A SOURCE MODULE.
.*             IF LV IS OMITTED, PROGRAM IS ASSUMED NOT TO BE
.*             RE-ENTRANT. USE EXIT MACRO IN CONJUNCTION WITH THIS
.*             MACRO.
.*             FOR RE-ENTRANT MODULE, 18F AS SAVE AREA WILL
.*             BE ASSUMED TO BE FIRST. PAY ATTENTION TO THIS
.*             WHEN YOU SET UP THE DSECT.
.*
.*       EXAMPLES =
.*
.*         *   SET (R12,R11),LV=WKLENG,DSECT=WKAREA
.*
.*             R12 AND R11 WILL BE BASE REGISTERS.
.*             LV WILL ASSUME A RE-ENTRANT MODULE AND THIS IS THE
.*                LENGTH OF THE GETMAIN AREA BEING OBTAINED (WHICH
.*                ALSO INCLUDES THE SAVE AREA OF 18F THAT WILL BE
.*                AT THE BEGINNING OF THE GETMAINED AREA.)
.*                THE GETMAINED DSECT SHOULD LOOK LIKE :
.*                           WKAREA    DSECT
.*                                     DS    18F
.*                           USER1     DS    CL256
.*                                     ETC   ........
.*
.*         *   SET LV=WKLENG
.*
.*             THIS ASSUMES R12 AS BASE REGISTER, A RE-ENTRANT
.*                MODULE, BUT YOU WILL HAVE TO CODE THE USING
.*                STATEMENT FOR THE GETMAIN AREA DSECT
.*
.*         *   SET
.*
.*             THIS ASSUMES A NON-RE-ENTRANT MODULE, R12 WILL BE
.*                BASE REGISTER.
.*
.*--------------------------------------------------------------------
.*
         LCLA  &C,&TEST,&ORG,&CSLENG
         LCLC  &B,&SAVE
         GBLC  &SETEXIT
&SETEXIT SETC  ''
&ORG     SETA  0
&TEST    SETA  1
         AIF   (T'&BASE EQ 'O').DEF
&C       SETA  N'&BASE
&B       SETC  '&BASE(&TEST)'
         AGO   .EQU
.DEF     ANOP
&C       SETA  1
&B       SETC  'R12'
.EQU     ANOP
         AIF   (T'&REG EQ 'O').SETREG
         AGO   .REGDONE
.SETREG  ANOP
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
.REGDONE ANOP
         B     28(R15)             BRANCH AROUND
&CSLENG  SETA  K'&SYSECT
         DC    AL2(&CSLENG)        LENG OF CSECT NAME
         DC    CL8'&SYSECT'        CSECT NAME
         DC    CL8'&SYSDATE'       THIS IS DATE
         DC    CL6'&SYSTIME'       THIS IS TIME
         CNOP  0,4                 GET ALIGNMENT
         STM   R14,R12,12(R13)     SAVE PREVIOUS REGS
         LR    &B,R15              GET BASE REG SETUP
         USING &SYSECT,&B          ESTABLISH ADDRESABILITY
.LOOP    ANOP
         AIF   (&TEST EQ &C).THRU
&SAVE    SETC  '&BASE(&TEST)'
&ORG     SETA  &ORG+4096
&TEST    SETA  &TEST+1
&B       SETC  '&BASE(&TEST)'
         USING &SYSECT+&ORG,&B
         LA    &B,4095(,&SAVE)
         LA    &B,1(,&B)
         AGO   .LOOP
.THRU    ANOP
         AIF   (T'&LV EQ 'O').NORENT
&SETEXIT SETC  '&LV'
         GETMAIN R,LV=&LV
         ST    R13,4(,R1)          SAVE REG13 FROM PREVIOUS
         L     R15,24(,R13)        SAVE REG 1
         ST    R1,8(,R13)          SAVE MY REG13 IN PREV SAVE AREA
         LR    R13,R1              GET MY REG 13 READY
         LR    R1,R15              GET REG1 BACK
         AIF   (T'&DSECT EQ 'O').FINAL
         USING &DSECT,R13          ESTABLISH ADDRESSABILITY
.FINAL   ANOP
         MEXIT
.NORENT  ANOP
         CNOP  0,4                 GET ALIGNMENT
         BAL   R1,*+76             BRANCH AROUND
         DS    18F                 THIS IS MY SAVE AREA
         ST    R13,4(,R1)          SAVE REG13 FROM PREVIOUS
         L     R15,24(,R13)        SAVE REG 1
         ST    R1,8(,R13)          SAVE MY REG13 IN PREV SAVE AREA
         LR    R13,R1              GET MY REG 13 READY
         LR    R1,R15              GET REG1 BACK
         MEND
*
* ------------------------------------------------------------ *
*
         MACRO
         EXIT  &RC=,&R=
.*
.*--------------------------------------------------------------------
.*
.*       MACRO = EXIT
.*
.*       AUTHOR = VINH VU
.*
.*       DATE-WRITTEN = 09/02/81
.*
.*       PURPOSE = TO EXIT FROM A MODULE
.*             THIS HAS TO BE USED IN CONJUNCTION WITH MACRO
.*             SET WHICH IS THE INITIALIZATION MACRO.
.*
.*       EXAMPLES :
.*
.*         *   EXIT RC=10
.*
.*             THIS WILL GENERATE A RETURN CODE OF 10. NO FREEMAIN
.*                WILL BE DONE
.*
.*         *   EXIT R=R9
.*
.*             THIS WILL GENERATE RETURN CODE FROM CONTENTS OF REG 9.
.*                A FREEMAIN WILL BE DONE ALSO ASSUMING ADDRESS OF
.*                GETMAINED AREA IS IN REG13 (DONE IN MACRO SET).
.*
.*--------------------------------------------------------------------
.*
         GBLC  &SETEXIT
         AIF   ('&SETEXIT' EQ '').NOFREE
         LR    R1,R13              GET ADDR OF GMAREA INTO R1
         L     R13,4(,R13)         GET PREVIOUS SAVE AREA
         FREEMAIN R,LV=&SETEXIT,A=(R1)
         AGO   .FREEIT
.NOFREE  ANOP
         L     R13,4(,R13)         GET PREVIOUS SAVE AREA
.FREEIT  ANOP
         AIF   (T'&RC EQ 'O').CKR
         LA    R15,&RC             GET RETURN CODE
         AGO   .THRU
.CKR     ANOP
         AIF   (T'&R EQ 'O').NONE
         LR    R15,&R              GET RETURN CODE
         AGO   .THRU
.NONE    ANOP
         SR    R15,R15             RETURN CODE IS ZERO
.THRU    ANOP
         L     R14,12(0,R13)       GET R14
         LM    R0,R12,20(R13)      GET REG 0 - 12
         BR    R14                 RETURN TO CALLER
         MEND
*
* ------ IN-LINE MACROS END ---------------------------------- *
*
* ------------------------------------------------------------ *
*        REAL CODES BEGIN                                      *
* ------------------------------------------------------------ *
*
         SET   (R12),LV=WKLENG,DSECT=WKAREA   SAVE CALLER'S REGS
*
PARMLST  EQU   *                              LABEL PARMLST
         SR    R9,R9                          CLEAR OUT RC
         USING EFPL,R1                        MAP EVAL PARM LIST
         L     R2,EFPLEVAL                    LOAD EVAL POINTER
         L     R11,0(R2)                      ADRESS OF EVAL BLOCK
         USING EVALBLOCK,R11                  MAP EVAL BLOCK
         L     R5,EFPLARG                     LOAD ARG LST PNTR
         USING ARGTABLE_ENTRY,R5              MAP THE ENTRY
*
* ------------------------------------------------------------ *
*        GET/PROCESS PARM                                      *
* ------------------------------------------------------------ *
*
         LM    R3,R4,ARGTABLE_ARGSTRING_PTR   LOAD ARG ADDR/LNGTH
*
* ------------------------------------------------------------ *
*        R3 = PARM LENGTH, R4 = ADDRESS TO PARM                *
* ------------------------------------------------------------ *
*
         LTR   R4,R4                          HAS TO BE > 0
         BC    13,BAD_CALL
         LTR   R3,R3                          CHECK PARM ADDRESS
         BC    13,BAD_CALL
         C     R4,F250                        CHECK FOR TXT > 250
         BH    BAD_CALL                       YES - THEN BAD CALL
*
         MVI   INDATA,C' '
         MVC   INDATA+1(L'INDATA-1),INDATA
         XC    WKSYMBP,WKSYMBP                CLEAR OUT WKAREA
         LA    R14,WKSYMBP
         USING SYMBP,R14                      SET UP WKAREA
*
         LA    R1,INDATA
         ST    R1,SYMBPPATTERN@
         ST    R4,SYMBPPATTERNLENGTH          GET INPUT LENGTH
*
         BCTR  R4,0
         EX    R4,GETINPUT
         EX    R4,TRTIT                    CHECK FOR '&'
         BC    8,NOXLATE                   IF NOT FND, DON'T DO NOTHING
*
         LA    R1,EVALBLOCK_EVDATA         GET ADDRESS OF OUTPUT AREA
         ST    R1,SYMBPTARGET@             STORE IT IN SMBP
         MVC   EVALBLOCK_EVLEN,F250        SET MAX LENGTH
         LA    R1,EVALBLOCK_EVLEN          GET ADDRESS OF OUTPUT LENGT
         ST    R1,SYMBPTARGETLENGTH@       STORE IT IN SMBP
*
         LA    R1,RCODE                    GET ADDRESS OF RC
         ST    R1,SYMBPRETURNCODE@         STORE IT IN SMBP
         LINK  EP=ASASYMBM,MF=(E,SYMBP)    CALL SYMBOL SERVICE
*
         LA    R5,ARGTABLE_NEXT-ARGTABLE_ENTRY(R5)     NO NEXT PARM
         CLC   ARGTABLE_ARGSTRING_PTR(8),=8X'FF'
         BNE   BAD_CALL                             ELSE GOTO BAD_CALL
*
GETOUT   EQU   *                              LABEL RETURN
         EXIT  R=R9                           USE R9 AS RC
*
NOXLATE  EQU   *
         LA    R4,1(,R4)                      GET BACK THE ORIG LENTH
         STCM  R4,B'1111',EVALBLOCK_EVLEN     SAVE IT BACK
         MVC   EVALBLOCK_EVDATA(L'INDATA),INDATA    GET INPUT DATA BACK
         B     GETOUT                         READY TO RETURN
*
*
GETINPUT MVC   INDATA(0),0(R3)                SAVE INPUT DATA
*
TRTIT    TRT   INDATA(0),TRTABLE              CHECK FOR C'&'
*
BAD_CALL EQU   *                              LABEL BAD_CALL
         MVC   EVALBLOCK_EVLEN,F1             RETURN VAL LNGTH
         MVI   EVALBLOCK_EVDATA,C'N'          RETURN 'N'
         LA    R9,4                           RC=4
         B     GETOUT
*
MAXLENG  EQU   250
*
F1       DC    F'1'
F250     DC    AL4(MAXLENG)
*
TRTABLE  DC    256X'00'
         ORG   TRTABLE+C'&&'                  STOP AT '&'
         DC    X'FF'
         ORG
*
WKAREA   DSECT
         DS    18F
WKSYMBP  DS    CL(SYMBP_LEN)
*
RCODE    DS    F
*
INDATA   DS    CL(MAXLENG)
*
WKLENG   EQU   *-WKAREA
         EJECT
*
         ASASYMBP
         IRXEFPL
         IRXEVALB
         IRXARGTB
         END
